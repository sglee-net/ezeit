/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.chronotics.talaria.thrift_gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2019-01-17")
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sender_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RECEIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiver_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence_no", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("total_count", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LIST_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("list_bool", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField LIST_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("list_i16", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField LIST_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("list_i32", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField LIST_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("list_i64", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LIST_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("list_double", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField LIST_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("list_string", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField BINARY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_value", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("payload", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LIST_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("list_message", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField SET_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("set_message", org.apache.thrift.protocol.TType.SET, (short)16);
  private static final org.apache.thrift.protocol.TField MAP_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("map_message", org.apache.thrift.protocol.TType.MAP, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String sender_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String receiver_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String timestamp; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String subject; // optional
  public long sequence_no; // optional
  public long total_count; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> list_bool; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> list_i16; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> list_i32; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> list_i64; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> list_double; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> list_string; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer binary_value; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String payload; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Message> list_message; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<Message> set_message; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,Message> map_message; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENDER_ID((short)1, "sender_id"),
    RECEIVER_ID((short)2, "receiver_id"),
    TIMESTAMP((short)3, "timestamp"),
    SUBJECT((short)4, "subject"),
    SEQUENCE_NO((short)5, "sequence_no"),
    TOTAL_COUNT((short)6, "total_count"),
    LIST_BOOL((short)7, "list_bool"),
    LIST_I16((short)8, "list_i16"),
    LIST_I32((short)9, "list_i32"),
    LIST_I64((short)10, "list_i64"),
    LIST_DOUBLE((short)11, "list_double"),
    LIST_STRING((short)12, "list_string"),
    BINARY_VALUE((short)13, "binary_value"),
    PAYLOAD((short)14, "payload"),
    LIST_MESSAGE((short)15, "list_message"),
    SET_MESSAGE((short)16, "set_message"),
    MAP_MESSAGE((short)17, "map_message");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENDER_ID
          return SENDER_ID;
        case 2: // RECEIVER_ID
          return RECEIVER_ID;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // SUBJECT
          return SUBJECT;
        case 5: // SEQUENCE_NO
          return SEQUENCE_NO;
        case 6: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 7: // LIST_BOOL
          return LIST_BOOL;
        case 8: // LIST_I16
          return LIST_I16;
        case 9: // LIST_I32
          return LIST_I32;
        case 10: // LIST_I64
          return LIST_I64;
        case 11: // LIST_DOUBLE
          return LIST_DOUBLE;
        case 12: // LIST_STRING
          return LIST_STRING;
        case 13: // BINARY_VALUE
          return BINARY_VALUE;
        case 14: // PAYLOAD
          return PAYLOAD;
        case 15: // LIST_MESSAGE
          return LIST_MESSAGE;
        case 16: // SET_MESSAGE
          return SET_MESSAGE;
        case 17: // MAP_MESSAGE
          return MAP_MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCE_NO_ISSET_ID = 0;
  private static final int __TOTAL_COUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RECEIVER_ID,_Fields.TIMESTAMP,_Fields.SUBJECT,_Fields.SEQUENCE_NO,_Fields.TOTAL_COUNT,_Fields.LIST_BOOL,_Fields.LIST_I16,_Fields.LIST_I32,_Fields.LIST_I64,_Fields.LIST_DOUBLE,_Fields.LIST_STRING,_Fields.BINARY_VALUE,_Fields.PAYLOAD,_Fields.LIST_MESSAGE,_Fields.SET_MESSAGE,_Fields.MAP_MESSAGE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("sender_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("receiver_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("sequence_no", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("total_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIST_BOOL, new org.apache.thrift.meta_data.FieldMetaData("list_bool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.LIST_I16, new org.apache.thrift.meta_data.FieldMetaData("list_i16", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.LIST_I32, new org.apache.thrift.meta_data.FieldMetaData("list_i32", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LIST_I64, new org.apache.thrift.meta_data.FieldMetaData("list_i64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LIST_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("list_double", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.LIST_STRING, new org.apache.thrift.meta_data.FieldMetaData("list_string", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BINARY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("binary_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("payload", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIST_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("list_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Message"))));
    tmpMap.put(_Fields.SET_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("set_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Message"))));
    tmpMap.put(_Fields.MAP_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("map_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Message"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    java.lang.String sender_id)
  {
    this();
    this.sender_id = sender_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSender_id()) {
      this.sender_id = other.sender_id;
    }
    if (other.isSetReceiver_id()) {
      this.receiver_id = other.receiver_id;
    }
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    this.sequence_no = other.sequence_no;
    this.total_count = other.total_count;
    if (other.isSetList_bool()) {
      java.util.List<java.lang.Boolean> __this__list_bool = new java.util.ArrayList<java.lang.Boolean>(other.list_bool);
      this.list_bool = __this__list_bool;
    }
    if (other.isSetList_i16()) {
      java.util.List<java.lang.Short> __this__list_i16 = new java.util.ArrayList<java.lang.Short>(other.list_i16);
      this.list_i16 = __this__list_i16;
    }
    if (other.isSetList_i32()) {
      java.util.List<java.lang.Integer> __this__list_i32 = new java.util.ArrayList<java.lang.Integer>(other.list_i32);
      this.list_i32 = __this__list_i32;
    }
    if (other.isSetList_i64()) {
      java.util.List<java.lang.Long> __this__list_i64 = new java.util.ArrayList<java.lang.Long>(other.list_i64);
      this.list_i64 = __this__list_i64;
    }
    if (other.isSetList_double()) {
      java.util.List<java.lang.Double> __this__list_double = new java.util.ArrayList<java.lang.Double>(other.list_double);
      this.list_double = __this__list_double;
    }
    if (other.isSetList_string()) {
      java.util.List<java.lang.String> __this__list_string = new java.util.ArrayList<java.lang.String>(other.list_string);
      this.list_string = __this__list_string;
    }
    if (other.isSetBinary_value()) {
      this.binary_value = org.apache.thrift.TBaseHelper.copyBinary(other.binary_value);
    }
    if (other.isSetPayload()) {
      this.payload = other.payload;
    }
    if (other.isSetList_message()) {
      java.util.List<Message> __this__list_message = new java.util.ArrayList<Message>(other.list_message.size());
      for (Message other_element : other.list_message) {
        __this__list_message.add(new Message(other_element));
      }
      this.list_message = __this__list_message;
    }
    if (other.isSetSet_message()) {
      java.util.Set<Message> __this__set_message = new java.util.HashSet<Message>(other.set_message.size());
      for (Message other_element : other.set_message) {
        __this__set_message.add(new Message(other_element));
      }
      this.set_message = __this__set_message;
    }
    if (other.isSetMap_message()) {
      java.util.Map<java.lang.String,Message> __this__map_message = new java.util.HashMap<java.lang.String,Message>(other.map_message.size());
      for (java.util.Map.Entry<java.lang.String, Message> other_element : other.map_message.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        Message other_element_value = other_element.getValue();

        java.lang.String __this__map_message_copy_key = other_element_key;

        Message __this__map_message_copy_value = new Message(other_element_value);

        __this__map_message.put(__this__map_message_copy_key, __this__map_message_copy_value);
      }
      this.map_message = __this__map_message;
    }
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    this.sender_id = null;
    this.receiver_id = null;
    this.timestamp = null;
    this.subject = null;
    setSequence_noIsSet(false);
    this.sequence_no = 0;
    setTotal_countIsSet(false);
    this.total_count = 0;
    this.list_bool = null;
    this.list_i16 = null;
    this.list_i32 = null;
    this.list_i64 = null;
    this.list_double = null;
    this.list_string = null;
    this.binary_value = null;
    this.payload = null;
    this.list_message = null;
    this.set_message = null;
    this.map_message = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSender_id() {
    return this.sender_id;
  }

  public Message setSender_id(@org.apache.thrift.annotation.Nullable java.lang.String sender_id) {
    this.sender_id = sender_id;
    return this;
  }

  public void unsetSender_id() {
    this.sender_id = null;
  }

  /** Returns true if field sender_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSender_id() {
    return this.sender_id != null;
  }

  public void setSender_idIsSet(boolean value) {
    if (!value) {
      this.sender_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReceiver_id() {
    return this.receiver_id;
  }

  public Message setReceiver_id(@org.apache.thrift.annotation.Nullable java.lang.String receiver_id) {
    this.receiver_id = receiver_id;
    return this;
  }

  public void unsetReceiver_id() {
    this.receiver_id = null;
  }

  /** Returns true if field receiver_id is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiver_id() {
    return this.receiver_id != null;
  }

  public void setReceiver_idIsSet(boolean value) {
    if (!value) {
      this.receiver_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimestamp() {
    return this.timestamp;
  }

  public Message setTimestamp(@org.apache.thrift.annotation.Nullable java.lang.String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSubject() {
    return this.subject;
  }

  public Message setSubject(@org.apache.thrift.annotation.Nullable java.lang.String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public long getSequence_no() {
    return this.sequence_no;
  }

  public Message setSequence_no(long sequence_no) {
    this.sequence_no = sequence_no;
    setSequence_noIsSet(true);
    return this;
  }

  public void unsetSequence_no() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQUENCE_NO_ISSET_ID);
  }

  /** Returns true if field sequence_no is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence_no() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQUENCE_NO_ISSET_ID);
  }

  public void setSequence_noIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQUENCE_NO_ISSET_ID, value);
  }

  public long getTotal_count() {
    return this.total_count;
  }

  public Message setTotal_count(long total_count) {
    this.total_count = total_count;
    setTotal_countIsSet(true);
    return this;
  }

  public void unsetTotal_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_COUNT_ISSET_ID);
  }

  /** Returns true if field total_count is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_COUNT_ISSET_ID);
  }

  public void setTotal_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_COUNT_ISSET_ID, value);
  }

  public int getList_boolSize() {
    return (this.list_bool == null) ? 0 : this.list_bool.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getList_boolIterator() {
    return (this.list_bool == null) ? null : this.list_bool.iterator();
  }

  public void addToList_bool(boolean elem) {
    if (this.list_bool == null) {
      this.list_bool = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.list_bool.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getList_bool() {
    return this.list_bool;
  }

  public Message setList_bool(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> list_bool) {
    this.list_bool = list_bool;
    return this;
  }

  public void unsetList_bool() {
    this.list_bool = null;
  }

  /** Returns true if field list_bool is set (has been assigned a value) and false otherwise */
  public boolean isSetList_bool() {
    return this.list_bool != null;
  }

  public void setList_boolIsSet(boolean value) {
    if (!value) {
      this.list_bool = null;
    }
  }

  public int getList_i16Size() {
    return (this.list_i16 == null) ? 0 : this.list_i16.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Short> getList_i16Iterator() {
    return (this.list_i16 == null) ? null : this.list_i16.iterator();
  }

  public void addToList_i16(short elem) {
    if (this.list_i16 == null) {
      this.list_i16 = new java.util.ArrayList<java.lang.Short>();
    }
    this.list_i16.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Short> getList_i16() {
    return this.list_i16;
  }

  public Message setList_i16(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> list_i16) {
    this.list_i16 = list_i16;
    return this;
  }

  public void unsetList_i16() {
    this.list_i16 = null;
  }

  /** Returns true if field list_i16 is set (has been assigned a value) and false otherwise */
  public boolean isSetList_i16() {
    return this.list_i16 != null;
  }

  public void setList_i16IsSet(boolean value) {
    if (!value) {
      this.list_i16 = null;
    }
  }

  public int getList_i32Size() {
    return (this.list_i32 == null) ? 0 : this.list_i32.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getList_i32Iterator() {
    return (this.list_i32 == null) ? null : this.list_i32.iterator();
  }

  public void addToList_i32(int elem) {
    if (this.list_i32 == null) {
      this.list_i32 = new java.util.ArrayList<java.lang.Integer>();
    }
    this.list_i32.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getList_i32() {
    return this.list_i32;
  }

  public Message setList_i32(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> list_i32) {
    this.list_i32 = list_i32;
    return this;
  }

  public void unsetList_i32() {
    this.list_i32 = null;
  }

  /** Returns true if field list_i32 is set (has been assigned a value) and false otherwise */
  public boolean isSetList_i32() {
    return this.list_i32 != null;
  }

  public void setList_i32IsSet(boolean value) {
    if (!value) {
      this.list_i32 = null;
    }
  }

  public int getList_i64Size() {
    return (this.list_i64 == null) ? 0 : this.list_i64.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getList_i64Iterator() {
    return (this.list_i64 == null) ? null : this.list_i64.iterator();
  }

  public void addToList_i64(long elem) {
    if (this.list_i64 == null) {
      this.list_i64 = new java.util.ArrayList<java.lang.Long>();
    }
    this.list_i64.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getList_i64() {
    return this.list_i64;
  }

  public Message setList_i64(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> list_i64) {
    this.list_i64 = list_i64;
    return this;
  }

  public void unsetList_i64() {
    this.list_i64 = null;
  }

  /** Returns true if field list_i64 is set (has been assigned a value) and false otherwise */
  public boolean isSetList_i64() {
    return this.list_i64 != null;
  }

  public void setList_i64IsSet(boolean value) {
    if (!value) {
      this.list_i64 = null;
    }
  }

  public int getList_doubleSize() {
    return (this.list_double == null) ? 0 : this.list_double.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getList_doubleIterator() {
    return (this.list_double == null) ? null : this.list_double.iterator();
  }

  public void addToList_double(double elem) {
    if (this.list_double == null) {
      this.list_double = new java.util.ArrayList<java.lang.Double>();
    }
    this.list_double.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getList_double() {
    return this.list_double;
  }

  public Message setList_double(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> list_double) {
    this.list_double = list_double;
    return this;
  }

  public void unsetList_double() {
    this.list_double = null;
  }

  /** Returns true if field list_double is set (has been assigned a value) and false otherwise */
  public boolean isSetList_double() {
    return this.list_double != null;
  }

  public void setList_doubleIsSet(boolean value) {
    if (!value) {
      this.list_double = null;
    }
  }

  public int getList_stringSize() {
    return (this.list_string == null) ? 0 : this.list_string.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getList_stringIterator() {
    return (this.list_string == null) ? null : this.list_string.iterator();
  }

  public void addToList_string(java.lang.String elem) {
    if (this.list_string == null) {
      this.list_string = new java.util.ArrayList<java.lang.String>();
    }
    this.list_string.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getList_string() {
    return this.list_string;
  }

  public Message setList_string(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> list_string) {
    this.list_string = list_string;
    return this;
  }

  public void unsetList_string() {
    this.list_string = null;
  }

  /** Returns true if field list_string is set (has been assigned a value) and false otherwise */
  public boolean isSetList_string() {
    return this.list_string != null;
  }

  public void setList_stringIsSet(boolean value) {
    if (!value) {
      this.list_string = null;
    }
  }

  public byte[] getBinary_value() {
    setBinary_value(org.apache.thrift.TBaseHelper.rightSize(binary_value));
    return binary_value == null ? null : binary_value.array();
  }

  public java.nio.ByteBuffer bufferForBinary_value() {
    return org.apache.thrift.TBaseHelper.copyBinary(binary_value);
  }

  public Message setBinary_value(byte[] binary_value) {
    this.binary_value = binary_value == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(binary_value.clone());
    return this;
  }

  public Message setBinary_value(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer binary_value) {
    this.binary_value = org.apache.thrift.TBaseHelper.copyBinary(binary_value);
    return this;
  }

  public void unsetBinary_value() {
    this.binary_value = null;
  }

  /** Returns true if field binary_value is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_value() {
    return this.binary_value != null;
  }

  public void setBinary_valueIsSet(boolean value) {
    if (!value) {
      this.binary_value = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPayload() {
    return this.payload;
  }

  public Message setPayload(@org.apache.thrift.annotation.Nullable java.lang.String payload) {
    this.payload = payload;
    return this;
  }

  public void unsetPayload() {
    this.payload = null;
  }

  /** Returns true if field payload is set (has been assigned a value) and false otherwise */
  public boolean isSetPayload() {
    return this.payload != null;
  }

  public void setPayloadIsSet(boolean value) {
    if (!value) {
      this.payload = null;
    }
  }

  public int getList_messageSize() {
    return (this.list_message == null) ? 0 : this.list_message.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Message> getList_messageIterator() {
    return (this.list_message == null) ? null : this.list_message.iterator();
  }

  public void addToList_message(Message elem) {
    if (this.list_message == null) {
      this.list_message = new java.util.ArrayList<Message>();
    }
    this.list_message.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Message> getList_message() {
    return this.list_message;
  }

  public Message setList_message(@org.apache.thrift.annotation.Nullable java.util.List<Message> list_message) {
    this.list_message = list_message;
    return this;
  }

  public void unsetList_message() {
    this.list_message = null;
  }

  /** Returns true if field list_message is set (has been assigned a value) and false otherwise */
  public boolean isSetList_message() {
    return this.list_message != null;
  }

  public void setList_messageIsSet(boolean value) {
    if (!value) {
      this.list_message = null;
    }
  }

  public int getSet_messageSize() {
    return (this.set_message == null) ? 0 : this.set_message.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Message> getSet_messageIterator() {
    return (this.set_message == null) ? null : this.set_message.iterator();
  }

  public void addToSet_message(Message elem) {
    if (this.set_message == null) {
      this.set_message = new java.util.HashSet<Message>();
    }
    this.set_message.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<Message> getSet_message() {
    return this.set_message;
  }

  public Message setSet_message(@org.apache.thrift.annotation.Nullable java.util.Set<Message> set_message) {
    this.set_message = set_message;
    return this;
  }

  public void unsetSet_message() {
    this.set_message = null;
  }

  /** Returns true if field set_message is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_message() {
    return this.set_message != null;
  }

  public void setSet_messageIsSet(boolean value) {
    if (!value) {
      this.set_message = null;
    }
  }

  public int getMap_messageSize() {
    return (this.map_message == null) ? 0 : this.map_message.size();
  }

  public void putToMap_message(java.lang.String key, Message val) {
    if (this.map_message == null) {
      this.map_message = new java.util.HashMap<java.lang.String,Message>();
    }
    this.map_message.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,Message> getMap_message() {
    return this.map_message;
  }

  public Message setMap_message(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,Message> map_message) {
    this.map_message = map_message;
    return this;
  }

  public void unsetMap_message() {
    this.map_message = null;
  }

  /** Returns true if field map_message is set (has been assigned a value) and false otherwise */
  public boolean isSetMap_message() {
    return this.map_message != null;
  }

  public void setMap_messageIsSet(boolean value) {
    if (!value) {
      this.map_message = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SENDER_ID:
      if (value == null) {
        unsetSender_id();
      } else {
        setSender_id((java.lang.String)value);
      }
      break;

    case RECEIVER_ID:
      if (value == null) {
        unsetReceiver_id();
      } else {
        setReceiver_id((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.String)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((java.lang.String)value);
      }
      break;

    case SEQUENCE_NO:
      if (value == null) {
        unsetSequence_no();
      } else {
        setSequence_no((java.lang.Long)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotal_count();
      } else {
        setTotal_count((java.lang.Long)value);
      }
      break;

    case LIST_BOOL:
      if (value == null) {
        unsetList_bool();
      } else {
        setList_bool((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case LIST_I16:
      if (value == null) {
        unsetList_i16();
      } else {
        setList_i16((java.util.List<java.lang.Short>)value);
      }
      break;

    case LIST_I32:
      if (value == null) {
        unsetList_i32();
      } else {
        setList_i32((java.util.List<java.lang.Integer>)value);
      }
      break;

    case LIST_I64:
      if (value == null) {
        unsetList_i64();
      } else {
        setList_i64((java.util.List<java.lang.Long>)value);
      }
      break;

    case LIST_DOUBLE:
      if (value == null) {
        unsetList_double();
      } else {
        setList_double((java.util.List<java.lang.Double>)value);
      }
      break;

    case LIST_STRING:
      if (value == null) {
        unsetList_string();
      } else {
        setList_string((java.util.List<java.lang.String>)value);
      }
      break;

    case BINARY_VALUE:
      if (value == null) {
        unsetBinary_value();
      } else {
        if (value instanceof byte[]) {
          setBinary_value((byte[])value);
        } else {
          setBinary_value((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PAYLOAD:
      if (value == null) {
        unsetPayload();
      } else {
        setPayload((java.lang.String)value);
      }
      break;

    case LIST_MESSAGE:
      if (value == null) {
        unsetList_message();
      } else {
        setList_message((java.util.List<Message>)value);
      }
      break;

    case SET_MESSAGE:
      if (value == null) {
        unsetSet_message();
      } else {
        setSet_message((java.util.Set<Message>)value);
      }
      break;

    case MAP_MESSAGE:
      if (value == null) {
        unsetMap_message();
      } else {
        setMap_message((java.util.Map<java.lang.String,Message>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SENDER_ID:
      return getSender_id();

    case RECEIVER_ID:
      return getReceiver_id();

    case TIMESTAMP:
      return getTimestamp();

    case SUBJECT:
      return getSubject();

    case SEQUENCE_NO:
      return getSequence_no();

    case TOTAL_COUNT:
      return getTotal_count();

    case LIST_BOOL:
      return getList_bool();

    case LIST_I16:
      return getList_i16();

    case LIST_I32:
      return getList_i32();

    case LIST_I64:
      return getList_i64();

    case LIST_DOUBLE:
      return getList_double();

    case LIST_STRING:
      return getList_string();

    case BINARY_VALUE:
      return getBinary_value();

    case PAYLOAD:
      return getPayload();

    case LIST_MESSAGE:
      return getList_message();

    case SET_MESSAGE:
      return getSet_message();

    case MAP_MESSAGE:
      return getMap_message();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SENDER_ID:
      return isSetSender_id();
    case RECEIVER_ID:
      return isSetReceiver_id();
    case TIMESTAMP:
      return isSetTimestamp();
    case SUBJECT:
      return isSetSubject();
    case SEQUENCE_NO:
      return isSetSequence_no();
    case TOTAL_COUNT:
      return isSetTotal_count();
    case LIST_BOOL:
      return isSetList_bool();
    case LIST_I16:
      return isSetList_i16();
    case LIST_I32:
      return isSetList_i32();
    case LIST_I64:
      return isSetList_i64();
    case LIST_DOUBLE:
      return isSetList_double();
    case LIST_STRING:
      return isSetList_string();
    case BINARY_VALUE:
      return isSetBinary_value();
    case PAYLOAD:
      return isSetPayload();
    case LIST_MESSAGE:
      return isSetList_message();
    case SET_MESSAGE:
      return isSetSet_message();
    case MAP_MESSAGE:
      return isSetMap_message();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sender_id = true && this.isSetSender_id();
    boolean that_present_sender_id = true && that.isSetSender_id();
    if (this_present_sender_id || that_present_sender_id) {
      if (!(this_present_sender_id && that_present_sender_id))
        return false;
      if (!this.sender_id.equals(that.sender_id))
        return false;
    }

    boolean this_present_receiver_id = true && this.isSetReceiver_id();
    boolean that_present_receiver_id = true && that.isSetReceiver_id();
    if (this_present_receiver_id || that_present_receiver_id) {
      if (!(this_present_receiver_id && that_present_receiver_id))
        return false;
      if (!this.receiver_id.equals(that.receiver_id))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_sequence_no = true && this.isSetSequence_no();
    boolean that_present_sequence_no = true && that.isSetSequence_no();
    if (this_present_sequence_no || that_present_sequence_no) {
      if (!(this_present_sequence_no && that_present_sequence_no))
        return false;
      if (this.sequence_no != that.sequence_no)
        return false;
    }

    boolean this_present_total_count = true && this.isSetTotal_count();
    boolean that_present_total_count = true && that.isSetTotal_count();
    if (this_present_total_count || that_present_total_count) {
      if (!(this_present_total_count && that_present_total_count))
        return false;
      if (this.total_count != that.total_count)
        return false;
    }

    boolean this_present_list_bool = true && this.isSetList_bool();
    boolean that_present_list_bool = true && that.isSetList_bool();
    if (this_present_list_bool || that_present_list_bool) {
      if (!(this_present_list_bool && that_present_list_bool))
        return false;
      if (!this.list_bool.equals(that.list_bool))
        return false;
    }

    boolean this_present_list_i16 = true && this.isSetList_i16();
    boolean that_present_list_i16 = true && that.isSetList_i16();
    if (this_present_list_i16 || that_present_list_i16) {
      if (!(this_present_list_i16 && that_present_list_i16))
        return false;
      if (!this.list_i16.equals(that.list_i16))
        return false;
    }

    boolean this_present_list_i32 = true && this.isSetList_i32();
    boolean that_present_list_i32 = true && that.isSetList_i32();
    if (this_present_list_i32 || that_present_list_i32) {
      if (!(this_present_list_i32 && that_present_list_i32))
        return false;
      if (!this.list_i32.equals(that.list_i32))
        return false;
    }

    boolean this_present_list_i64 = true && this.isSetList_i64();
    boolean that_present_list_i64 = true && that.isSetList_i64();
    if (this_present_list_i64 || that_present_list_i64) {
      if (!(this_present_list_i64 && that_present_list_i64))
        return false;
      if (!this.list_i64.equals(that.list_i64))
        return false;
    }

    boolean this_present_list_double = true && this.isSetList_double();
    boolean that_present_list_double = true && that.isSetList_double();
    if (this_present_list_double || that_present_list_double) {
      if (!(this_present_list_double && that_present_list_double))
        return false;
      if (!this.list_double.equals(that.list_double))
        return false;
    }

    boolean this_present_list_string = true && this.isSetList_string();
    boolean that_present_list_string = true && that.isSetList_string();
    if (this_present_list_string || that_present_list_string) {
      if (!(this_present_list_string && that_present_list_string))
        return false;
      if (!this.list_string.equals(that.list_string))
        return false;
    }

    boolean this_present_binary_value = true && this.isSetBinary_value();
    boolean that_present_binary_value = true && that.isSetBinary_value();
    if (this_present_binary_value || that_present_binary_value) {
      if (!(this_present_binary_value && that_present_binary_value))
        return false;
      if (!this.binary_value.equals(that.binary_value))
        return false;
    }

    boolean this_present_payload = true && this.isSetPayload();
    boolean that_present_payload = true && that.isSetPayload();
    if (this_present_payload || that_present_payload) {
      if (!(this_present_payload && that_present_payload))
        return false;
      if (!this.payload.equals(that.payload))
        return false;
    }

    boolean this_present_list_message = true && this.isSetList_message();
    boolean that_present_list_message = true && that.isSetList_message();
    if (this_present_list_message || that_present_list_message) {
      if (!(this_present_list_message && that_present_list_message))
        return false;
      if (!this.list_message.equals(that.list_message))
        return false;
    }

    boolean this_present_set_message = true && this.isSetSet_message();
    boolean that_present_set_message = true && that.isSetSet_message();
    if (this_present_set_message || that_present_set_message) {
      if (!(this_present_set_message && that_present_set_message))
        return false;
      if (!this.set_message.equals(that.set_message))
        return false;
    }

    boolean this_present_map_message = true && this.isSetMap_message();
    boolean that_present_map_message = true && that.isSetMap_message();
    if (this_present_map_message || that_present_map_message) {
      if (!(this_present_map_message && that_present_map_message))
        return false;
      if (!this.map_message.equals(that.map_message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSender_id()) ? 131071 : 524287);
    if (isSetSender_id())
      hashCode = hashCode * 8191 + sender_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetReceiver_id()) ? 131071 : 524287);
    if (isSetReceiver_id())
      hashCode = hashCode * 8191 + receiver_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimestamp()) ? 131071 : 524287);
    if (isSetTimestamp())
      hashCode = hashCode * 8191 + timestamp.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubject()) ? 131071 : 524287);
    if (isSetSubject())
      hashCode = hashCode * 8191 + subject.hashCode();

    hashCode = hashCode * 8191 + ((isSetSequence_no()) ? 131071 : 524287);
    if (isSetSequence_no())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sequence_no);

    hashCode = hashCode * 8191 + ((isSetTotal_count()) ? 131071 : 524287);
    if (isSetTotal_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_count);

    hashCode = hashCode * 8191 + ((isSetList_bool()) ? 131071 : 524287);
    if (isSetList_bool())
      hashCode = hashCode * 8191 + list_bool.hashCode();

    hashCode = hashCode * 8191 + ((isSetList_i16()) ? 131071 : 524287);
    if (isSetList_i16())
      hashCode = hashCode * 8191 + list_i16.hashCode();

    hashCode = hashCode * 8191 + ((isSetList_i32()) ? 131071 : 524287);
    if (isSetList_i32())
      hashCode = hashCode * 8191 + list_i32.hashCode();

    hashCode = hashCode * 8191 + ((isSetList_i64()) ? 131071 : 524287);
    if (isSetList_i64())
      hashCode = hashCode * 8191 + list_i64.hashCode();

    hashCode = hashCode * 8191 + ((isSetList_double()) ? 131071 : 524287);
    if (isSetList_double())
      hashCode = hashCode * 8191 + list_double.hashCode();

    hashCode = hashCode * 8191 + ((isSetList_string()) ? 131071 : 524287);
    if (isSetList_string())
      hashCode = hashCode * 8191 + list_string.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinary_value()) ? 131071 : 524287);
    if (isSetBinary_value())
      hashCode = hashCode * 8191 + binary_value.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayload()) ? 131071 : 524287);
    if (isSetPayload())
      hashCode = hashCode * 8191 + payload.hashCode();

    hashCode = hashCode * 8191 + ((isSetList_message()) ? 131071 : 524287);
    if (isSetList_message())
      hashCode = hashCode * 8191 + list_message.hashCode();

    hashCode = hashCode * 8191 + ((isSetSet_message()) ? 131071 : 524287);
    if (isSetSet_message())
      hashCode = hashCode * 8191 + set_message.hashCode();

    hashCode = hashCode * 8191 + ((isSetMap_message()) ? 131071 : 524287);
    if (isSetMap_message())
      hashCode = hashCode * 8191 + map_message.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSender_id()).compareTo(other.isSetSender_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender_id, other.sender_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReceiver_id()).compareTo(other.isSetReceiver_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiver_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiver_id, other.receiver_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSequence_no()).compareTo(other.isSetSequence_no());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence_no()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence_no, other.sequence_no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotal_count()).compareTo(other.isSetTotal_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_count, other.total_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetList_bool()).compareTo(other.isSetList_bool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_bool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_bool, other.list_bool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetList_i16()).compareTo(other.isSetList_i16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_i16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_i16, other.list_i16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetList_i32()).compareTo(other.isSetList_i32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_i32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_i32, other.list_i32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetList_i64()).compareTo(other.isSetList_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_i64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_i64, other.list_i64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetList_double()).compareTo(other.isSetList_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_double, other.list_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetList_string()).compareTo(other.isSetList_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_string, other.list_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBinary_value()).compareTo(other.isSetBinary_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_value, other.binary_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload, other.payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetList_message()).compareTo(other.isSetList_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_message, other.list_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSet_message()).compareTo(other.isSetSet_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_message, other.set_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMap_message()).compareTo(other.isSetMap_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMap_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_message, other.map_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Message(");
    boolean first = true;

    sb.append("sender_id:");
    if (this.sender_id == null) {
      sb.append("null");
    } else {
      sb.append(this.sender_id);
    }
    first = false;
    if (isSetReceiver_id()) {
      if (!first) sb.append(", ");
      sb.append("receiver_id:");
      if (this.receiver_id == null) {
        sb.append("null");
      } else {
        sb.append(this.receiver_id);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
    }
    if (isSetSubject()) {
      if (!first) sb.append(", ");
      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
    }
    if (isSetSequence_no()) {
      if (!first) sb.append(", ");
      sb.append("sequence_no:");
      sb.append(this.sequence_no);
      first = false;
    }
    if (isSetTotal_count()) {
      if (!first) sb.append(", ");
      sb.append("total_count:");
      sb.append(this.total_count);
      first = false;
    }
    if (isSetList_bool()) {
      if (!first) sb.append(", ");
      sb.append("list_bool:");
      if (this.list_bool == null) {
        sb.append("null");
      } else {
        sb.append(this.list_bool);
      }
      first = false;
    }
    if (isSetList_i16()) {
      if (!first) sb.append(", ");
      sb.append("list_i16:");
      if (this.list_i16 == null) {
        sb.append("null");
      } else {
        sb.append(this.list_i16);
      }
      first = false;
    }
    if (isSetList_i32()) {
      if (!first) sb.append(", ");
      sb.append("list_i32:");
      if (this.list_i32 == null) {
        sb.append("null");
      } else {
        sb.append(this.list_i32);
      }
      first = false;
    }
    if (isSetList_i64()) {
      if (!first) sb.append(", ");
      sb.append("list_i64:");
      if (this.list_i64 == null) {
        sb.append("null");
      } else {
        sb.append(this.list_i64);
      }
      first = false;
    }
    if (isSetList_double()) {
      if (!first) sb.append(", ");
      sb.append("list_double:");
      if (this.list_double == null) {
        sb.append("null");
      } else {
        sb.append(this.list_double);
      }
      first = false;
    }
    if (isSetList_string()) {
      if (!first) sb.append(", ");
      sb.append("list_string:");
      if (this.list_string == null) {
        sb.append("null");
      } else {
        sb.append(this.list_string);
      }
      first = false;
    }
    if (isSetBinary_value()) {
      if (!first) sb.append(", ");
      sb.append("binary_value:");
      if (this.binary_value == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binary_value, sb);
      }
      first = false;
    }
    if (isSetPayload()) {
      if (!first) sb.append(", ");
      sb.append("payload:");
      if (this.payload == null) {
        sb.append("null");
      } else {
        sb.append(this.payload);
      }
      first = false;
    }
    if (isSetList_message()) {
      if (!first) sb.append(", ");
      sb.append("list_message:");
      if (this.list_message == null) {
        sb.append("null");
      } else {
        sb.append(this.list_message);
      }
      first = false;
    }
    if (isSetSet_message()) {
      if (!first) sb.append(", ");
      sb.append("set_message:");
      if (this.set_message == null) {
        sb.append("null");
      } else {
        sb.append(this.set_message);
      }
      first = false;
    }
    if (isSetMap_message()) {
      if (!first) sb.append(", ");
      sb.append("map_message:");
      if (this.map_message == null) {
        sb.append("null");
      } else {
        sb.append(this.map_message);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sender_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sender_id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sender_id = iprot.readString();
              struct.setSender_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECEIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiver_id = iprot.readString();
              struct.setReceiver_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequence_no = iprot.readI64();
              struct.setSequence_noIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_count = iprot.readI64();
              struct.setTotal_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LIST_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.list_bool = new java.util.ArrayList<java.lang.Boolean>(_list0.size);
                boolean _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBool();
                  struct.list_bool.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setList_boolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LIST_I16
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.list_i16 = new java.util.ArrayList<java.lang.Short>(_list3.size);
                short _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI16();
                  struct.list_i16.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setList_i16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LIST_I32
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.list_i32 = new java.util.ArrayList<java.lang.Integer>(_list6.size);
                int _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI32();
                  struct.list_i32.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setList_i32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LIST_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.list_i64 = new java.util.ArrayList<java.lang.Long>(_list9.size);
                long _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI64();
                  struct.list_i64.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setList_i64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LIST_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.list_double = new java.util.ArrayList<java.lang.Double>(_list12.size);
                double _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readDouble();
                  struct.list_double.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setList_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LIST_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.list_string = new java.util.ArrayList<java.lang.String>(_list15.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readString();
                  struct.list_string.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setList_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BINARY_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binary_value = iprot.readBinary();
              struct.setBinary_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payload = iprot.readString();
              struct.setPayloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LIST_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.list_message = new java.util.ArrayList<Message>(_list18.size);
                @org.apache.thrift.annotation.Nullable Message _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new Message();
                  _elem19.read(iprot);
                  struct.list_message.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setList_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SET_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set21 = iprot.readSetBegin();
                struct.set_message = new java.util.HashSet<Message>(2*_set21.size);
                @org.apache.thrift.annotation.Nullable Message _elem22;
                for (int _i23 = 0; _i23 < _set21.size; ++_i23)
                {
                  _elem22 = new Message();
                  _elem22.read(iprot);
                  struct.set_message.add(_elem22);
                }
                iprot.readSetEnd();
              }
              struct.setSet_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MAP_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.map_message = new java.util.HashMap<java.lang.String,Message>(2*_map24.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key25;
                @org.apache.thrift.annotation.Nullable Message _val26;
                for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                {
                  _key25 = iprot.readString();
                  _val26 = new Message();
                  _val26.read(iprot);
                  struct.map_message.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setMap_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sender_id != null) {
        oprot.writeFieldBegin(SENDER_ID_FIELD_DESC);
        oprot.writeString(struct.sender_id);
        oprot.writeFieldEnd();
      }
      if (struct.receiver_id != null) {
        if (struct.isSetReceiver_id()) {
          oprot.writeFieldBegin(RECEIVER_ID_FIELD_DESC);
          oprot.writeString(struct.receiver_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timestamp != null) {
        if (struct.isSetTimestamp()) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.timestamp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subject != null) {
        if (struct.isSetSubject()) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSequence_no()) {
        oprot.writeFieldBegin(SEQUENCE_NO_FIELD_DESC);
        oprot.writeI64(struct.sequence_no);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal_count()) {
        oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
        oprot.writeI64(struct.total_count);
        oprot.writeFieldEnd();
      }
      if (struct.list_bool != null) {
        if (struct.isSetList_bool()) {
          oprot.writeFieldBegin(LIST_BOOL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.list_bool.size()));
            for (boolean _iter28 : struct.list_bool)
            {
              oprot.writeBool(_iter28);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.list_i16 != null) {
        if (struct.isSetList_i16()) {
          oprot.writeFieldBegin(LIST_I16_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.list_i16.size()));
            for (short _iter29 : struct.list_i16)
            {
              oprot.writeI16(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.list_i32 != null) {
        if (struct.isSetList_i32()) {
          oprot.writeFieldBegin(LIST_I32_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.list_i32.size()));
            for (int _iter30 : struct.list_i32)
            {
              oprot.writeI32(_iter30);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.list_i64 != null) {
        if (struct.isSetList_i64()) {
          oprot.writeFieldBegin(LIST_I64_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.list_i64.size()));
            for (long _iter31 : struct.list_i64)
            {
              oprot.writeI64(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.list_double != null) {
        if (struct.isSetList_double()) {
          oprot.writeFieldBegin(LIST_DOUBLE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.list_double.size()));
            for (double _iter32 : struct.list_double)
            {
              oprot.writeDouble(_iter32);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.list_string != null) {
        if (struct.isSetList_string()) {
          oprot.writeFieldBegin(LIST_STRING_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.list_string.size()));
            for (java.lang.String _iter33 : struct.list_string)
            {
              oprot.writeString(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binary_value != null) {
        if (struct.isSetBinary_value()) {
          oprot.writeFieldBegin(BINARY_VALUE_FIELD_DESC);
          oprot.writeBinary(struct.binary_value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.payload != null) {
        if (struct.isSetPayload()) {
          oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
          oprot.writeString(struct.payload);
          oprot.writeFieldEnd();
        }
      }
      if (struct.list_message != null) {
        if (struct.isSetList_message()) {
          oprot.writeFieldBegin(LIST_MESSAGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.list_message.size()));
            for (Message _iter34 : struct.list_message)
            {
              _iter34.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.set_message != null) {
        if (struct.isSetSet_message()) {
          oprot.writeFieldBegin(SET_MESSAGE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.set_message.size()));
            for (Message _iter35 : struct.set_message)
            {
              _iter35.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.map_message != null) {
        if (struct.isSetMap_message()) {
          oprot.writeFieldBegin(MAP_MESSAGE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.map_message.size()));
            for (java.util.Map.Entry<java.lang.String, Message> _iter36 : struct.map_message.entrySet())
            {
              oprot.writeString(_iter36.getKey());
              _iter36.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.sender_id);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReceiver_id()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetSubject()) {
        optionals.set(2);
      }
      if (struct.isSetSequence_no()) {
        optionals.set(3);
      }
      if (struct.isSetTotal_count()) {
        optionals.set(4);
      }
      if (struct.isSetList_bool()) {
        optionals.set(5);
      }
      if (struct.isSetList_i16()) {
        optionals.set(6);
      }
      if (struct.isSetList_i32()) {
        optionals.set(7);
      }
      if (struct.isSetList_i64()) {
        optionals.set(8);
      }
      if (struct.isSetList_double()) {
        optionals.set(9);
      }
      if (struct.isSetList_string()) {
        optionals.set(10);
      }
      if (struct.isSetBinary_value()) {
        optionals.set(11);
      }
      if (struct.isSetPayload()) {
        optionals.set(12);
      }
      if (struct.isSetList_message()) {
        optionals.set(13);
      }
      if (struct.isSetSet_message()) {
        optionals.set(14);
      }
      if (struct.isSetMap_message()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetReceiver_id()) {
        oprot.writeString(struct.receiver_id);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeString(struct.timestamp);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetSequence_no()) {
        oprot.writeI64(struct.sequence_no);
      }
      if (struct.isSetTotal_count()) {
        oprot.writeI64(struct.total_count);
      }
      if (struct.isSetList_bool()) {
        {
          oprot.writeI32(struct.list_bool.size());
          for (boolean _iter37 : struct.list_bool)
          {
            oprot.writeBool(_iter37);
          }
        }
      }
      if (struct.isSetList_i16()) {
        {
          oprot.writeI32(struct.list_i16.size());
          for (short _iter38 : struct.list_i16)
          {
            oprot.writeI16(_iter38);
          }
        }
      }
      if (struct.isSetList_i32()) {
        {
          oprot.writeI32(struct.list_i32.size());
          for (int _iter39 : struct.list_i32)
          {
            oprot.writeI32(_iter39);
          }
        }
      }
      if (struct.isSetList_i64()) {
        {
          oprot.writeI32(struct.list_i64.size());
          for (long _iter40 : struct.list_i64)
          {
            oprot.writeI64(_iter40);
          }
        }
      }
      if (struct.isSetList_double()) {
        {
          oprot.writeI32(struct.list_double.size());
          for (double _iter41 : struct.list_double)
          {
            oprot.writeDouble(_iter41);
          }
        }
      }
      if (struct.isSetList_string()) {
        {
          oprot.writeI32(struct.list_string.size());
          for (java.lang.String _iter42 : struct.list_string)
          {
            oprot.writeString(_iter42);
          }
        }
      }
      if (struct.isSetBinary_value()) {
        oprot.writeBinary(struct.binary_value);
      }
      if (struct.isSetPayload()) {
        oprot.writeString(struct.payload);
      }
      if (struct.isSetList_message()) {
        {
          oprot.writeI32(struct.list_message.size());
          for (Message _iter43 : struct.list_message)
          {
            _iter43.write(oprot);
          }
        }
      }
      if (struct.isSetSet_message()) {
        {
          oprot.writeI32(struct.set_message.size());
          for (Message _iter44 : struct.set_message)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetMap_message()) {
        {
          oprot.writeI32(struct.map_message.size());
          for (java.util.Map.Entry<java.lang.String, Message> _iter45 : struct.map_message.entrySet())
          {
            oprot.writeString(_iter45.getKey());
            _iter45.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sender_id = iprot.readString();
      struct.setSender_idIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.receiver_id = iprot.readString();
        struct.setReceiver_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readString();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sequence_no = iprot.readI64();
        struct.setSequence_noIsSet(true);
      }
      if (incoming.get(4)) {
        struct.total_count = iprot.readI64();
        struct.setTotal_countIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.list_bool = new java.util.ArrayList<java.lang.Boolean>(_list46.size);
          boolean _elem47;
          for (int _i48 = 0; _i48 < _list46.size; ++_i48)
          {
            _elem47 = iprot.readBool();
            struct.list_bool.add(_elem47);
          }
        }
        struct.setList_boolIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.list_i16 = new java.util.ArrayList<java.lang.Short>(_list49.size);
          short _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = iprot.readI16();
            struct.list_i16.add(_elem50);
          }
        }
        struct.setList_i16IsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.list_i32 = new java.util.ArrayList<java.lang.Integer>(_list52.size);
          int _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = iprot.readI32();
            struct.list_i32.add(_elem53);
          }
        }
        struct.setList_i32IsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.list_i64 = new java.util.ArrayList<java.lang.Long>(_list55.size);
          long _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readI64();
            struct.list_i64.add(_elem56);
          }
        }
        struct.setList_i64IsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.list_double = new java.util.ArrayList<java.lang.Double>(_list58.size);
          double _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = iprot.readDouble();
            struct.list_double.add(_elem59);
          }
        }
        struct.setList_doubleIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.list_string = new java.util.ArrayList<java.lang.String>(_list61.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readString();
            struct.list_string.add(_elem62);
          }
        }
        struct.setList_stringIsSet(true);
      }
      if (incoming.get(11)) {
        struct.binary_value = iprot.readBinary();
        struct.setBinary_valueIsSet(true);
      }
      if (incoming.get(12)) {
        struct.payload = iprot.readString();
        struct.setPayloadIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list64 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.list_message = new java.util.ArrayList<Message>(_list64.size);
          @org.apache.thrift.annotation.Nullable Message _elem65;
          for (int _i66 = 0; _i66 < _list64.size; ++_i66)
          {
            _elem65 = new Message();
            _elem65.read(iprot);
            struct.list_message.add(_elem65);
          }
        }
        struct.setList_messageIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TSet _set67 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.set_message = new java.util.HashSet<Message>(2*_set67.size);
          @org.apache.thrift.annotation.Nullable Message _elem68;
          for (int _i69 = 0; _i69 < _set67.size; ++_i69)
          {
            _elem68 = new Message();
            _elem68.read(iprot);
            struct.set_message.add(_elem68);
          }
        }
        struct.setSet_messageIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.map_message = new java.util.HashMap<java.lang.String,Message>(2*_map70.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key71;
          @org.apache.thrift.annotation.Nullable Message _val72;
          for (int _i73 = 0; _i73 < _map70.size; ++_i73)
          {
            _key71 = iprot.readString();
            _val72 = new Message();
            _val72.read(iprot);
            struct.map_message.put(_key71, _val72);
          }
        }
        struct.setMap_messageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

