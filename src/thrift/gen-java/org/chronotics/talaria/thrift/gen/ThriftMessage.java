/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.chronotics.talaria.thrift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-23")
public class ThriftMessage implements org.apache.thrift.TBase<ThriftMessage, ThriftMessage._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftMessage");

  private static final org.apache.thrift.protocol.TField _SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sender_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField _RECEIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_receiver_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("_timestamp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("_subject", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField _SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("_sequence_no", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField _TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("_total_count", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField _BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("_binary", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField _PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("_payload", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField _LIST_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_message", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField _SET_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_set_message", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField _MAP_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("_map_message", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField _LIST_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_bool", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField _LIST_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_i16", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField _LIST_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_i32", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField _LIST_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_i64", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField _LIST_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_double", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField _LIST_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_string", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField _SET_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("_set_bool", org.apache.thrift.protocol.TType.SET, (short)18);
  private static final org.apache.thrift.protocol.TField _SET_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("_set_i16", org.apache.thrift.protocol.TType.SET, (short)19);
  private static final org.apache.thrift.protocol.TField _SET_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("_set_i32", org.apache.thrift.protocol.TType.SET, (short)20);
  private static final org.apache.thrift.protocol.TField _SET_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("_set_i64", org.apache.thrift.protocol.TType.SET, (short)21);
  private static final org.apache.thrift.protocol.TField _SET_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("_set_double", org.apache.thrift.protocol.TType.SET, (short)22);
  private static final org.apache.thrift.protocol.TField _SET_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("_set_string", org.apache.thrift.protocol.TType.SET, (short)23);
  private static final org.apache.thrift.protocol.TField _MAP_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("_map_bool", org.apache.thrift.protocol.TType.MAP, (short)24);
  private static final org.apache.thrift.protocol.TField _MAP_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("_map_i16", org.apache.thrift.protocol.TType.MAP, (short)25);
  private static final org.apache.thrift.protocol.TField _MAP_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("_map_i32", org.apache.thrift.protocol.TType.MAP, (short)26);
  private static final org.apache.thrift.protocol.TField _MAP_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("_map_i64", org.apache.thrift.protocol.TType.MAP, (short)27);
  private static final org.apache.thrift.protocol.TField _MAP_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("_map_double", org.apache.thrift.protocol.TType.MAP, (short)28);
  private static final org.apache.thrift.protocol.TField _MAP_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("_map_string", org.apache.thrift.protocol.TType.MAP, (short)29);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftMessageTupleSchemeFactory();

  public java.lang.String _sender_id; // required
  public java.lang.String _receiver_id; // optional
  public java.lang.String _timestamp; // optional
  public java.lang.String _subject; // optional
  public long _sequence_no; // optional
  public long _total_count; // optional
  public java.nio.ByteBuffer _binary; // optional
  public java.lang.String _payload; // optional
  public java.util.List<ThriftMessage> _list_message; // optional
  public java.util.Set<ThriftMessage> _set_message; // optional
  public java.util.Map<java.lang.String,ThriftMessage> _map_message; // optional
  public java.util.List<java.lang.Boolean> _list_bool; // optional
  public java.util.List<java.lang.Short> _list_i16; // optional
  public java.util.List<java.lang.Integer> _list_i32; // optional
  public java.util.List<java.lang.Long> _list_i64; // optional
  public java.util.List<java.lang.Double> _list_double; // optional
  public java.util.List<java.lang.String> _list_string; // optional
  public java.util.Set<java.lang.Boolean> _set_bool; // optional
  public java.util.Set<java.lang.Short> _set_i16; // optional
  public java.util.Set<java.lang.Integer> _set_i32; // optional
  public java.util.Set<java.lang.Long> _set_i64; // optional
  public java.util.Set<java.lang.Double> _set_double; // optional
  public java.util.Set<java.lang.String> _set_string; // optional
  public java.util.Map<java.lang.String,java.lang.Boolean> _map_bool; // optional
  public java.util.Map<java.lang.String,java.lang.Short> _map_i16; // optional
  public java.util.Map<java.lang.String,java.lang.Integer> _map_i32; // optional
  public java.util.Map<java.lang.String,java.lang.Long> _map_i64; // optional
  public java.util.Map<java.lang.String,java.lang.Double> _map_double; // optional
  public java.util.Map<java.lang.String,java.lang.String> _map_string; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _SENDER_ID((short)1, "_sender_id"),
    _RECEIVER_ID((short)2, "_receiver_id"),
    _TIMESTAMP((short)3, "_timestamp"),
    _SUBJECT((short)4, "_subject"),
    _SEQUENCE_NO((short)5, "_sequence_no"),
    _TOTAL_COUNT((short)6, "_total_count"),
    _BINARY((short)7, "_binary"),
    _PAYLOAD((short)8, "_payload"),
    _LIST_MESSAGE((short)9, "_list_message"),
    _SET_MESSAGE((short)10, "_set_message"),
    _MAP_MESSAGE((short)11, "_map_message"),
    _LIST_BOOL((short)12, "_list_bool"),
    _LIST_I16((short)13, "_list_i16"),
    _LIST_I32((short)14, "_list_i32"),
    _LIST_I64((short)15, "_list_i64"),
    _LIST_DOUBLE((short)16, "_list_double"),
    _LIST_STRING((short)17, "_list_string"),
    _SET_BOOL((short)18, "_set_bool"),
    _SET_I16((short)19, "_set_i16"),
    _SET_I32((short)20, "_set_i32"),
    _SET_I64((short)21, "_set_i64"),
    _SET_DOUBLE((short)22, "_set_double"),
    _SET_STRING((short)23, "_set_string"),
    _MAP_BOOL((short)24, "_map_bool"),
    _MAP_I16((short)25, "_map_i16"),
    _MAP_I32((short)26, "_map_i32"),
    _MAP_I64((short)27, "_map_i64"),
    _MAP_DOUBLE((short)28, "_map_double"),
    _MAP_STRING((short)29, "_map_string");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _SENDER_ID
          return _SENDER_ID;
        case 2: // _RECEIVER_ID
          return _RECEIVER_ID;
        case 3: // _TIMESTAMP
          return _TIMESTAMP;
        case 4: // _SUBJECT
          return _SUBJECT;
        case 5: // _SEQUENCE_NO
          return _SEQUENCE_NO;
        case 6: // _TOTAL_COUNT
          return _TOTAL_COUNT;
        case 7: // _BINARY
          return _BINARY;
        case 8: // _PAYLOAD
          return _PAYLOAD;
        case 9: // _LIST_MESSAGE
          return _LIST_MESSAGE;
        case 10: // _SET_MESSAGE
          return _SET_MESSAGE;
        case 11: // _MAP_MESSAGE
          return _MAP_MESSAGE;
        case 12: // _LIST_BOOL
          return _LIST_BOOL;
        case 13: // _LIST_I16
          return _LIST_I16;
        case 14: // _LIST_I32
          return _LIST_I32;
        case 15: // _LIST_I64
          return _LIST_I64;
        case 16: // _LIST_DOUBLE
          return _LIST_DOUBLE;
        case 17: // _LIST_STRING
          return _LIST_STRING;
        case 18: // _SET_BOOL
          return _SET_BOOL;
        case 19: // _SET_I16
          return _SET_I16;
        case 20: // _SET_I32
          return _SET_I32;
        case 21: // _SET_I64
          return _SET_I64;
        case 22: // _SET_DOUBLE
          return _SET_DOUBLE;
        case 23: // _SET_STRING
          return _SET_STRING;
        case 24: // _MAP_BOOL
          return _MAP_BOOL;
        case 25: // _MAP_I16
          return _MAP_I16;
        case 26: // _MAP_I32
          return _MAP_I32;
        case 27: // _MAP_I64
          return _MAP_I64;
        case 28: // _MAP_DOUBLE
          return _MAP_DOUBLE;
        case 29: // _MAP_STRING
          return _MAP_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___SEQUENCE_NO_ISSET_ID = 0;
  private static final int ___TOTAL_COUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields._RECEIVER_ID,_Fields._TIMESTAMP,_Fields._SUBJECT,_Fields._SEQUENCE_NO,_Fields._TOTAL_COUNT,_Fields._BINARY,_Fields._PAYLOAD,_Fields._LIST_MESSAGE,_Fields._SET_MESSAGE,_Fields._MAP_MESSAGE,_Fields._LIST_BOOL,_Fields._LIST_I16,_Fields._LIST_I32,_Fields._LIST_I64,_Fields._LIST_DOUBLE,_Fields._LIST_STRING,_Fields._SET_BOOL,_Fields._SET_I16,_Fields._SET_I32,_Fields._SET_I64,_Fields._SET_DOUBLE,_Fields._SET_STRING,_Fields._MAP_BOOL,_Fields._MAP_I16,_Fields._MAP_I32,_Fields._MAP_I64,_Fields._MAP_DOUBLE,_Fields._MAP_STRING};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("_sender_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._RECEIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("_receiver_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("_timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("_subject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("_sequence_no", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields._TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("_total_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields._BINARY, new org.apache.thrift.meta_data.FieldMetaData("_binary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields._PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("_payload", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._LIST_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_list_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftMessage"))));
    tmpMap.put(_Fields._SET_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_set_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftMessage"))));
    tmpMap.put(_Fields._MAP_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("_map_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftMessage"))));
    tmpMap.put(_Fields._LIST_BOOL, new org.apache.thrift.meta_data.FieldMetaData("_list_bool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields._LIST_I16, new org.apache.thrift.meta_data.FieldMetaData("_list_i16", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields._LIST_I32, new org.apache.thrift.meta_data.FieldMetaData("_list_i32", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields._LIST_I64, new org.apache.thrift.meta_data.FieldMetaData("_list_i64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields._LIST_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("_list_double", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields._LIST_STRING, new org.apache.thrift.meta_data.FieldMetaData("_list_string", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields._SET_BOOL, new org.apache.thrift.meta_data.FieldMetaData("_set_bool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields._SET_I16, new org.apache.thrift.meta_data.FieldMetaData("_set_i16", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields._SET_I32, new org.apache.thrift.meta_data.FieldMetaData("_set_i32", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields._SET_I64, new org.apache.thrift.meta_data.FieldMetaData("_set_i64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields._SET_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("_set_double", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields._SET_STRING, new org.apache.thrift.meta_data.FieldMetaData("_set_string", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields._MAP_BOOL, new org.apache.thrift.meta_data.FieldMetaData("_map_bool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields._MAP_I16, new org.apache.thrift.meta_data.FieldMetaData("_map_i16", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields._MAP_I32, new org.apache.thrift.meta_data.FieldMetaData("_map_i32", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields._MAP_I64, new org.apache.thrift.meta_data.FieldMetaData("_map_i64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields._MAP_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("_map_double", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields._MAP_STRING, new org.apache.thrift.meta_data.FieldMetaData("_map_string", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftMessage.class, metaDataMap);
  }

  public ThriftMessage() {
  }

  public ThriftMessage(
    java.lang.String _sender_id)
  {
    this();
    this._sender_id = _sender_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftMessage(ThriftMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_sender_id()) {
      this._sender_id = other._sender_id;
    }
    if (other.isSet_receiver_id()) {
      this._receiver_id = other._receiver_id;
    }
    if (other.isSet_timestamp()) {
      this._timestamp = other._timestamp;
    }
    if (other.isSet_subject()) {
      this._subject = other._subject;
    }
    this._sequence_no = other._sequence_no;
    this._total_count = other._total_count;
    if (other.isSet_binary()) {
      this._binary = org.apache.thrift.TBaseHelper.copyBinary(other._binary);
    }
    if (other.isSet_payload()) {
      this._payload = other._payload;
    }
    if (other.isSet_list_message()) {
      java.util.List<ThriftMessage> __this___list_message = new java.util.ArrayList<ThriftMessage>(other._list_message.size());
      for (ThriftMessage other_element : other._list_message) {
        __this___list_message.add(new ThriftMessage(other_element));
      }
      this._list_message = __this___list_message;
    }
    if (other.isSet_set_message()) {
      java.util.Set<ThriftMessage> __this___set_message = new java.util.HashSet<ThriftMessage>(other._set_message.size());
      for (ThriftMessage other_element : other._set_message) {
        __this___set_message.add(new ThriftMessage(other_element));
      }
      this._set_message = __this___set_message;
    }
    if (other.isSet_map_message()) {
      java.util.Map<java.lang.String,ThriftMessage> __this___map_message = new java.util.HashMap<java.lang.String,ThriftMessage>(other._map_message.size());
      for (java.util.Map.Entry<java.lang.String, ThriftMessage> other_element : other._map_message.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        ThriftMessage other_element_value = other_element.getValue();

        java.lang.String __this___map_message_copy_key = other_element_key;

        ThriftMessage __this___map_message_copy_value = new ThriftMessage(other_element_value);

        __this___map_message.put(__this___map_message_copy_key, __this___map_message_copy_value);
      }
      this._map_message = __this___map_message;
    }
    if (other.isSet_list_bool()) {
      java.util.List<java.lang.Boolean> __this___list_bool = new java.util.ArrayList<java.lang.Boolean>(other._list_bool);
      this._list_bool = __this___list_bool;
    }
    if (other.isSet_list_i16()) {
      java.util.List<java.lang.Short> __this___list_i16 = new java.util.ArrayList<java.lang.Short>(other._list_i16);
      this._list_i16 = __this___list_i16;
    }
    if (other.isSet_list_i32()) {
      java.util.List<java.lang.Integer> __this___list_i32 = new java.util.ArrayList<java.lang.Integer>(other._list_i32);
      this._list_i32 = __this___list_i32;
    }
    if (other.isSet_list_i64()) {
      java.util.List<java.lang.Long> __this___list_i64 = new java.util.ArrayList<java.lang.Long>(other._list_i64);
      this._list_i64 = __this___list_i64;
    }
    if (other.isSet_list_double()) {
      java.util.List<java.lang.Double> __this___list_double = new java.util.ArrayList<java.lang.Double>(other._list_double);
      this._list_double = __this___list_double;
    }
    if (other.isSet_list_string()) {
      java.util.List<java.lang.String> __this___list_string = new java.util.ArrayList<java.lang.String>(other._list_string);
      this._list_string = __this___list_string;
    }
    if (other.isSet_set_bool()) {
      java.util.Set<java.lang.Boolean> __this___set_bool = new java.util.HashSet<java.lang.Boolean>(other._set_bool);
      this._set_bool = __this___set_bool;
    }
    if (other.isSet_set_i16()) {
      java.util.Set<java.lang.Short> __this___set_i16 = new java.util.HashSet<java.lang.Short>(other._set_i16);
      this._set_i16 = __this___set_i16;
    }
    if (other.isSet_set_i32()) {
      java.util.Set<java.lang.Integer> __this___set_i32 = new java.util.HashSet<java.lang.Integer>(other._set_i32);
      this._set_i32 = __this___set_i32;
    }
    if (other.isSet_set_i64()) {
      java.util.Set<java.lang.Long> __this___set_i64 = new java.util.HashSet<java.lang.Long>(other._set_i64);
      this._set_i64 = __this___set_i64;
    }
    if (other.isSet_set_double()) {
      java.util.Set<java.lang.Double> __this___set_double = new java.util.HashSet<java.lang.Double>(other._set_double);
      this._set_double = __this___set_double;
    }
    if (other.isSet_set_string()) {
      java.util.Set<java.lang.String> __this___set_string = new java.util.HashSet<java.lang.String>(other._set_string);
      this._set_string = __this___set_string;
    }
    if (other.isSet_map_bool()) {
      java.util.Map<java.lang.String,java.lang.Boolean> __this___map_bool = new java.util.HashMap<java.lang.String,java.lang.Boolean>(other._map_bool);
      this._map_bool = __this___map_bool;
    }
    if (other.isSet_map_i16()) {
      java.util.Map<java.lang.String,java.lang.Short> __this___map_i16 = new java.util.HashMap<java.lang.String,java.lang.Short>(other._map_i16);
      this._map_i16 = __this___map_i16;
    }
    if (other.isSet_map_i32()) {
      java.util.Map<java.lang.String,java.lang.Integer> __this___map_i32 = new java.util.HashMap<java.lang.String,java.lang.Integer>(other._map_i32);
      this._map_i32 = __this___map_i32;
    }
    if (other.isSet_map_i64()) {
      java.util.Map<java.lang.String,java.lang.Long> __this___map_i64 = new java.util.HashMap<java.lang.String,java.lang.Long>(other._map_i64);
      this._map_i64 = __this___map_i64;
    }
    if (other.isSet_map_double()) {
      java.util.Map<java.lang.String,java.lang.Double> __this___map_double = new java.util.HashMap<java.lang.String,java.lang.Double>(other._map_double);
      this._map_double = __this___map_double;
    }
    if (other.isSet_map_string()) {
      java.util.Map<java.lang.String,java.lang.String> __this___map_string = new java.util.HashMap<java.lang.String,java.lang.String>(other._map_string);
      this._map_string = __this___map_string;
    }
  }

  public ThriftMessage deepCopy() {
    return new ThriftMessage(this);
  }

  @Override
  public void clear() {
    this._sender_id = null;
    this._receiver_id = null;
    this._timestamp = null;
    this._subject = null;
    set_sequence_noIsSet(false);
    this._sequence_no = 0;
    set_total_countIsSet(false);
    this._total_count = 0;
    this._binary = null;
    this._payload = null;
    this._list_message = null;
    this._set_message = null;
    this._map_message = null;
    this._list_bool = null;
    this._list_i16 = null;
    this._list_i32 = null;
    this._list_i64 = null;
    this._list_double = null;
    this._list_string = null;
    this._set_bool = null;
    this._set_i16 = null;
    this._set_i32 = null;
    this._set_i64 = null;
    this._set_double = null;
    this._set_string = null;
    this._map_bool = null;
    this._map_i16 = null;
    this._map_i32 = null;
    this._map_i64 = null;
    this._map_double = null;
    this._map_string = null;
  }

  public java.lang.String get_sender_id() {
    return this._sender_id;
  }

  public ThriftMessage set_sender_id(java.lang.String _sender_id) {
    this._sender_id = _sender_id;
    return this;
  }

  public void unset_sender_id() {
    this._sender_id = null;
  }

  /** Returns true if field _sender_id is set (has been assigned a value) and false otherwise */
  public boolean isSet_sender_id() {
    return this._sender_id != null;
  }

  public void set_sender_idIsSet(boolean value) {
    if (!value) {
      this._sender_id = null;
    }
  }

  public java.lang.String get_receiver_id() {
    return this._receiver_id;
  }

  public ThriftMessage set_receiver_id(java.lang.String _receiver_id) {
    this._receiver_id = _receiver_id;
    return this;
  }

  public void unset_receiver_id() {
    this._receiver_id = null;
  }

  /** Returns true if field _receiver_id is set (has been assigned a value) and false otherwise */
  public boolean isSet_receiver_id() {
    return this._receiver_id != null;
  }

  public void set_receiver_idIsSet(boolean value) {
    if (!value) {
      this._receiver_id = null;
    }
  }

  public java.lang.String get_timestamp() {
    return this._timestamp;
  }

  public ThriftMessage set_timestamp(java.lang.String _timestamp) {
    this._timestamp = _timestamp;
    return this;
  }

  public void unset_timestamp() {
    this._timestamp = null;
  }

  /** Returns true if field _timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSet_timestamp() {
    return this._timestamp != null;
  }

  public void set_timestampIsSet(boolean value) {
    if (!value) {
      this._timestamp = null;
    }
  }

  public java.lang.String get_subject() {
    return this._subject;
  }

  public ThriftMessage set_subject(java.lang.String _subject) {
    this._subject = _subject;
    return this;
  }

  public void unset_subject() {
    this._subject = null;
  }

  /** Returns true if field _subject is set (has been assigned a value) and false otherwise */
  public boolean isSet_subject() {
    return this._subject != null;
  }

  public void set_subjectIsSet(boolean value) {
    if (!value) {
      this._subject = null;
    }
  }

  public long get_sequence_no() {
    return this._sequence_no;
  }

  public ThriftMessage set_sequence_no(long _sequence_no) {
    this._sequence_no = _sequence_no;
    set_sequence_noIsSet(true);
    return this;
  }

  public void unset_sequence_no() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___SEQUENCE_NO_ISSET_ID);
  }

  /** Returns true if field _sequence_no is set (has been assigned a value) and false otherwise */
  public boolean isSet_sequence_no() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___SEQUENCE_NO_ISSET_ID);
  }

  public void set_sequence_noIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___SEQUENCE_NO_ISSET_ID, value);
  }

  public long get_total_count() {
    return this._total_count;
  }

  public ThriftMessage set_total_count(long _total_count) {
    this._total_count = _total_count;
    set_total_countIsSet(true);
    return this;
  }

  public void unset_total_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___TOTAL_COUNT_ISSET_ID);
  }

  /** Returns true if field _total_count is set (has been assigned a value) and false otherwise */
  public boolean isSet_total_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___TOTAL_COUNT_ISSET_ID);
  }

  public void set_total_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___TOTAL_COUNT_ISSET_ID, value);
  }

  public byte[] get_binary() {
    set_binary(org.apache.thrift.TBaseHelper.rightSize(_binary));
    return _binary == null ? null : _binary.array();
  }

  public java.nio.ByteBuffer bufferFor_binary() {
    return org.apache.thrift.TBaseHelper.copyBinary(_binary);
  }

  public ThriftMessage set_binary(byte[] _binary) {
    this._binary = _binary == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(_binary.clone());
    return this;
  }

  public ThriftMessage set_binary(java.nio.ByteBuffer _binary) {
    this._binary = org.apache.thrift.TBaseHelper.copyBinary(_binary);
    return this;
  }

  public void unset_binary() {
    this._binary = null;
  }

  /** Returns true if field _binary is set (has been assigned a value) and false otherwise */
  public boolean isSet_binary() {
    return this._binary != null;
  }

  public void set_binaryIsSet(boolean value) {
    if (!value) {
      this._binary = null;
    }
  }

  public java.lang.String get_payload() {
    return this._payload;
  }

  public ThriftMessage set_payload(java.lang.String _payload) {
    this._payload = _payload;
    return this;
  }

  public void unset_payload() {
    this._payload = null;
  }

  /** Returns true if field _payload is set (has been assigned a value) and false otherwise */
  public boolean isSet_payload() {
    return this._payload != null;
  }

  public void set_payloadIsSet(boolean value) {
    if (!value) {
      this._payload = null;
    }
  }

  public int get_list_messageSize() {
    return (this._list_message == null) ? 0 : this._list_message.size();
  }

  public java.util.Iterator<ThriftMessage> get_list_messageIterator() {
    return (this._list_message == null) ? null : this._list_message.iterator();
  }

  public void addTo_list_message(ThriftMessage elem) {
    if (this._list_message == null) {
      this._list_message = new java.util.ArrayList<ThriftMessage>();
    }
    this._list_message.add(elem);
  }

  public java.util.List<ThriftMessage> get_list_message() {
    return this._list_message;
  }

  public ThriftMessage set_list_message(java.util.List<ThriftMessage> _list_message) {
    this._list_message = _list_message;
    return this;
  }

  public void unset_list_message() {
    this._list_message = null;
  }

  /** Returns true if field _list_message is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_message() {
    return this._list_message != null;
  }

  public void set_list_messageIsSet(boolean value) {
    if (!value) {
      this._list_message = null;
    }
  }

  public int get_set_messageSize() {
    return (this._set_message == null) ? 0 : this._set_message.size();
  }

  public java.util.Iterator<ThriftMessage> get_set_messageIterator() {
    return (this._set_message == null) ? null : this._set_message.iterator();
  }

  public void addTo_set_message(ThriftMessage elem) {
    if (this._set_message == null) {
      this._set_message = new java.util.HashSet<ThriftMessage>();
    }
    this._set_message.add(elem);
  }

  public java.util.Set<ThriftMessage> get_set_message() {
    return this._set_message;
  }

  public ThriftMessage set_set_message(java.util.Set<ThriftMessage> _set_message) {
    this._set_message = _set_message;
    return this;
  }

  public void unset_set_message() {
    this._set_message = null;
  }

  /** Returns true if field _set_message is set (has been assigned a value) and false otherwise */
  public boolean isSet_set_message() {
    return this._set_message != null;
  }

  public void set_set_messageIsSet(boolean value) {
    if (!value) {
      this._set_message = null;
    }
  }

  public int get_map_messageSize() {
    return (this._map_message == null) ? 0 : this._map_message.size();
  }

  public void putTo_map_message(java.lang.String key, ThriftMessage val) {
    if (this._map_message == null) {
      this._map_message = new java.util.HashMap<java.lang.String,ThriftMessage>();
    }
    this._map_message.put(key, val);
  }

  public java.util.Map<java.lang.String,ThriftMessage> get_map_message() {
    return this._map_message;
  }

  public ThriftMessage set_map_message(java.util.Map<java.lang.String,ThriftMessage> _map_message) {
    this._map_message = _map_message;
    return this;
  }

  public void unset_map_message() {
    this._map_message = null;
  }

  /** Returns true if field _map_message is set (has been assigned a value) and false otherwise */
  public boolean isSet_map_message() {
    return this._map_message != null;
  }

  public void set_map_messageIsSet(boolean value) {
    if (!value) {
      this._map_message = null;
    }
  }

  public int get_list_boolSize() {
    return (this._list_bool == null) ? 0 : this._list_bool.size();
  }

  public java.util.Iterator<java.lang.Boolean> get_list_boolIterator() {
    return (this._list_bool == null) ? null : this._list_bool.iterator();
  }

  public void addTo_list_bool(boolean elem) {
    if (this._list_bool == null) {
      this._list_bool = new java.util.ArrayList<java.lang.Boolean>();
    }
    this._list_bool.add(elem);
  }

  public java.util.List<java.lang.Boolean> get_list_bool() {
    return this._list_bool;
  }

  public ThriftMessage set_list_bool(java.util.List<java.lang.Boolean> _list_bool) {
    this._list_bool = _list_bool;
    return this;
  }

  public void unset_list_bool() {
    this._list_bool = null;
  }

  /** Returns true if field _list_bool is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_bool() {
    return this._list_bool != null;
  }

  public void set_list_boolIsSet(boolean value) {
    if (!value) {
      this._list_bool = null;
    }
  }

  public int get_list_i16Size() {
    return (this._list_i16 == null) ? 0 : this._list_i16.size();
  }

  public java.util.Iterator<java.lang.Short> get_list_i16Iterator() {
    return (this._list_i16 == null) ? null : this._list_i16.iterator();
  }

  public void addTo_list_i16(short elem) {
    if (this._list_i16 == null) {
      this._list_i16 = new java.util.ArrayList<java.lang.Short>();
    }
    this._list_i16.add(elem);
  }

  public java.util.List<java.lang.Short> get_list_i16() {
    return this._list_i16;
  }

  public ThriftMessage set_list_i16(java.util.List<java.lang.Short> _list_i16) {
    this._list_i16 = _list_i16;
    return this;
  }

  public void unset_list_i16() {
    this._list_i16 = null;
  }

  /** Returns true if field _list_i16 is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_i16() {
    return this._list_i16 != null;
  }

  public void set_list_i16IsSet(boolean value) {
    if (!value) {
      this._list_i16 = null;
    }
  }

  public int get_list_i32Size() {
    return (this._list_i32 == null) ? 0 : this._list_i32.size();
  }

  public java.util.Iterator<java.lang.Integer> get_list_i32Iterator() {
    return (this._list_i32 == null) ? null : this._list_i32.iterator();
  }

  public void addTo_list_i32(int elem) {
    if (this._list_i32 == null) {
      this._list_i32 = new java.util.ArrayList<java.lang.Integer>();
    }
    this._list_i32.add(elem);
  }

  public java.util.List<java.lang.Integer> get_list_i32() {
    return this._list_i32;
  }

  public ThriftMessage set_list_i32(java.util.List<java.lang.Integer> _list_i32) {
    this._list_i32 = _list_i32;
    return this;
  }

  public void unset_list_i32() {
    this._list_i32 = null;
  }

  /** Returns true if field _list_i32 is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_i32() {
    return this._list_i32 != null;
  }

  public void set_list_i32IsSet(boolean value) {
    if (!value) {
      this._list_i32 = null;
    }
  }

  public int get_list_i64Size() {
    return (this._list_i64 == null) ? 0 : this._list_i64.size();
  }

  public java.util.Iterator<java.lang.Long> get_list_i64Iterator() {
    return (this._list_i64 == null) ? null : this._list_i64.iterator();
  }

  public void addTo_list_i64(long elem) {
    if (this._list_i64 == null) {
      this._list_i64 = new java.util.ArrayList<java.lang.Long>();
    }
    this._list_i64.add(elem);
  }

  public java.util.List<java.lang.Long> get_list_i64() {
    return this._list_i64;
  }

  public ThriftMessage set_list_i64(java.util.List<java.lang.Long> _list_i64) {
    this._list_i64 = _list_i64;
    return this;
  }

  public void unset_list_i64() {
    this._list_i64 = null;
  }

  /** Returns true if field _list_i64 is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_i64() {
    return this._list_i64 != null;
  }

  public void set_list_i64IsSet(boolean value) {
    if (!value) {
      this._list_i64 = null;
    }
  }

  public int get_list_doubleSize() {
    return (this._list_double == null) ? 0 : this._list_double.size();
  }

  public java.util.Iterator<java.lang.Double> get_list_doubleIterator() {
    return (this._list_double == null) ? null : this._list_double.iterator();
  }

  public void addTo_list_double(double elem) {
    if (this._list_double == null) {
      this._list_double = new java.util.ArrayList<java.lang.Double>();
    }
    this._list_double.add(elem);
  }

  public java.util.List<java.lang.Double> get_list_double() {
    return this._list_double;
  }

  public ThriftMessage set_list_double(java.util.List<java.lang.Double> _list_double) {
    this._list_double = _list_double;
    return this;
  }

  public void unset_list_double() {
    this._list_double = null;
  }

  /** Returns true if field _list_double is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_double() {
    return this._list_double != null;
  }

  public void set_list_doubleIsSet(boolean value) {
    if (!value) {
      this._list_double = null;
    }
  }

  public int get_list_stringSize() {
    return (this._list_string == null) ? 0 : this._list_string.size();
  }

  public java.util.Iterator<java.lang.String> get_list_stringIterator() {
    return (this._list_string == null) ? null : this._list_string.iterator();
  }

  public void addTo_list_string(java.lang.String elem) {
    if (this._list_string == null) {
      this._list_string = new java.util.ArrayList<java.lang.String>();
    }
    this._list_string.add(elem);
  }

  public java.util.List<java.lang.String> get_list_string() {
    return this._list_string;
  }

  public ThriftMessage set_list_string(java.util.List<java.lang.String> _list_string) {
    this._list_string = _list_string;
    return this;
  }

  public void unset_list_string() {
    this._list_string = null;
  }

  /** Returns true if field _list_string is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_string() {
    return this._list_string != null;
  }

  public void set_list_stringIsSet(boolean value) {
    if (!value) {
      this._list_string = null;
    }
  }

  public int get_set_boolSize() {
    return (this._set_bool == null) ? 0 : this._set_bool.size();
  }

  public java.util.Iterator<java.lang.Boolean> get_set_boolIterator() {
    return (this._set_bool == null) ? null : this._set_bool.iterator();
  }

  public void addTo_set_bool(boolean elem) {
    if (this._set_bool == null) {
      this._set_bool = new java.util.HashSet<java.lang.Boolean>();
    }
    this._set_bool.add(elem);
  }

  public java.util.Set<java.lang.Boolean> get_set_bool() {
    return this._set_bool;
  }

  public ThriftMessage set_set_bool(java.util.Set<java.lang.Boolean> _set_bool) {
    this._set_bool = _set_bool;
    return this;
  }

  public void unset_set_bool() {
    this._set_bool = null;
  }

  /** Returns true if field _set_bool is set (has been assigned a value) and false otherwise */
  public boolean isSet_set_bool() {
    return this._set_bool != null;
  }

  public void set_set_boolIsSet(boolean value) {
    if (!value) {
      this._set_bool = null;
    }
  }

  public int get_set_i16Size() {
    return (this._set_i16 == null) ? 0 : this._set_i16.size();
  }

  public java.util.Iterator<java.lang.Short> get_set_i16Iterator() {
    return (this._set_i16 == null) ? null : this._set_i16.iterator();
  }

  public void addTo_set_i16(short elem) {
    if (this._set_i16 == null) {
      this._set_i16 = new java.util.HashSet<java.lang.Short>();
    }
    this._set_i16.add(elem);
  }

  public java.util.Set<java.lang.Short> get_set_i16() {
    return this._set_i16;
  }

  public ThriftMessage set_set_i16(java.util.Set<java.lang.Short> _set_i16) {
    this._set_i16 = _set_i16;
    return this;
  }

  public void unset_set_i16() {
    this._set_i16 = null;
  }

  /** Returns true if field _set_i16 is set (has been assigned a value) and false otherwise */
  public boolean isSet_set_i16() {
    return this._set_i16 != null;
  }

  public void set_set_i16IsSet(boolean value) {
    if (!value) {
      this._set_i16 = null;
    }
  }

  public int get_set_i32Size() {
    return (this._set_i32 == null) ? 0 : this._set_i32.size();
  }

  public java.util.Iterator<java.lang.Integer> get_set_i32Iterator() {
    return (this._set_i32 == null) ? null : this._set_i32.iterator();
  }

  public void addTo_set_i32(int elem) {
    if (this._set_i32 == null) {
      this._set_i32 = new java.util.HashSet<java.lang.Integer>();
    }
    this._set_i32.add(elem);
  }

  public java.util.Set<java.lang.Integer> get_set_i32() {
    return this._set_i32;
  }

  public ThriftMessage set_set_i32(java.util.Set<java.lang.Integer> _set_i32) {
    this._set_i32 = _set_i32;
    return this;
  }

  public void unset_set_i32() {
    this._set_i32 = null;
  }

  /** Returns true if field _set_i32 is set (has been assigned a value) and false otherwise */
  public boolean isSet_set_i32() {
    return this._set_i32 != null;
  }

  public void set_set_i32IsSet(boolean value) {
    if (!value) {
      this._set_i32 = null;
    }
  }

  public int get_set_i64Size() {
    return (this._set_i64 == null) ? 0 : this._set_i64.size();
  }

  public java.util.Iterator<java.lang.Long> get_set_i64Iterator() {
    return (this._set_i64 == null) ? null : this._set_i64.iterator();
  }

  public void addTo_set_i64(long elem) {
    if (this._set_i64 == null) {
      this._set_i64 = new java.util.HashSet<java.lang.Long>();
    }
    this._set_i64.add(elem);
  }

  public java.util.Set<java.lang.Long> get_set_i64() {
    return this._set_i64;
  }

  public ThriftMessage set_set_i64(java.util.Set<java.lang.Long> _set_i64) {
    this._set_i64 = _set_i64;
    return this;
  }

  public void unset_set_i64() {
    this._set_i64 = null;
  }

  /** Returns true if field _set_i64 is set (has been assigned a value) and false otherwise */
  public boolean isSet_set_i64() {
    return this._set_i64 != null;
  }

  public void set_set_i64IsSet(boolean value) {
    if (!value) {
      this._set_i64 = null;
    }
  }

  public int get_set_doubleSize() {
    return (this._set_double == null) ? 0 : this._set_double.size();
  }

  public java.util.Iterator<java.lang.Double> get_set_doubleIterator() {
    return (this._set_double == null) ? null : this._set_double.iterator();
  }

  public void addTo_set_double(double elem) {
    if (this._set_double == null) {
      this._set_double = new java.util.HashSet<java.lang.Double>();
    }
    this._set_double.add(elem);
  }

  public java.util.Set<java.lang.Double> get_set_double() {
    return this._set_double;
  }

  public ThriftMessage set_set_double(java.util.Set<java.lang.Double> _set_double) {
    this._set_double = _set_double;
    return this;
  }

  public void unset_set_double() {
    this._set_double = null;
  }

  /** Returns true if field _set_double is set (has been assigned a value) and false otherwise */
  public boolean isSet_set_double() {
    return this._set_double != null;
  }

  public void set_set_doubleIsSet(boolean value) {
    if (!value) {
      this._set_double = null;
    }
  }

  public int get_set_stringSize() {
    return (this._set_string == null) ? 0 : this._set_string.size();
  }

  public java.util.Iterator<java.lang.String> get_set_stringIterator() {
    return (this._set_string == null) ? null : this._set_string.iterator();
  }

  public void addTo_set_string(java.lang.String elem) {
    if (this._set_string == null) {
      this._set_string = new java.util.HashSet<java.lang.String>();
    }
    this._set_string.add(elem);
  }

  public java.util.Set<java.lang.String> get_set_string() {
    return this._set_string;
  }

  public ThriftMessage set_set_string(java.util.Set<java.lang.String> _set_string) {
    this._set_string = _set_string;
    return this;
  }

  public void unset_set_string() {
    this._set_string = null;
  }

  /** Returns true if field _set_string is set (has been assigned a value) and false otherwise */
  public boolean isSet_set_string() {
    return this._set_string != null;
  }

  public void set_set_stringIsSet(boolean value) {
    if (!value) {
      this._set_string = null;
    }
  }

  public int get_map_boolSize() {
    return (this._map_bool == null) ? 0 : this._map_bool.size();
  }

  public void putTo_map_bool(java.lang.String key, boolean val) {
    if (this._map_bool == null) {
      this._map_bool = new java.util.HashMap<java.lang.String,java.lang.Boolean>();
    }
    this._map_bool.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.Boolean> get_map_bool() {
    return this._map_bool;
  }

  public ThriftMessage set_map_bool(java.util.Map<java.lang.String,java.lang.Boolean> _map_bool) {
    this._map_bool = _map_bool;
    return this;
  }

  public void unset_map_bool() {
    this._map_bool = null;
  }

  /** Returns true if field _map_bool is set (has been assigned a value) and false otherwise */
  public boolean isSet_map_bool() {
    return this._map_bool != null;
  }

  public void set_map_boolIsSet(boolean value) {
    if (!value) {
      this._map_bool = null;
    }
  }

  public int get_map_i16Size() {
    return (this._map_i16 == null) ? 0 : this._map_i16.size();
  }

  public void putTo_map_i16(java.lang.String key, short val) {
    if (this._map_i16 == null) {
      this._map_i16 = new java.util.HashMap<java.lang.String,java.lang.Short>();
    }
    this._map_i16.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.Short> get_map_i16() {
    return this._map_i16;
  }

  public ThriftMessage set_map_i16(java.util.Map<java.lang.String,java.lang.Short> _map_i16) {
    this._map_i16 = _map_i16;
    return this;
  }

  public void unset_map_i16() {
    this._map_i16 = null;
  }

  /** Returns true if field _map_i16 is set (has been assigned a value) and false otherwise */
  public boolean isSet_map_i16() {
    return this._map_i16 != null;
  }

  public void set_map_i16IsSet(boolean value) {
    if (!value) {
      this._map_i16 = null;
    }
  }

  public int get_map_i32Size() {
    return (this._map_i32 == null) ? 0 : this._map_i32.size();
  }

  public void putTo_map_i32(java.lang.String key, int val) {
    if (this._map_i32 == null) {
      this._map_i32 = new java.util.HashMap<java.lang.String,java.lang.Integer>();
    }
    this._map_i32.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.Integer> get_map_i32() {
    return this._map_i32;
  }

  public ThriftMessage set_map_i32(java.util.Map<java.lang.String,java.lang.Integer> _map_i32) {
    this._map_i32 = _map_i32;
    return this;
  }

  public void unset_map_i32() {
    this._map_i32 = null;
  }

  /** Returns true if field _map_i32 is set (has been assigned a value) and false otherwise */
  public boolean isSet_map_i32() {
    return this._map_i32 != null;
  }

  public void set_map_i32IsSet(boolean value) {
    if (!value) {
      this._map_i32 = null;
    }
  }

  public int get_map_i64Size() {
    return (this._map_i64 == null) ? 0 : this._map_i64.size();
  }

  public void putTo_map_i64(java.lang.String key, long val) {
    if (this._map_i64 == null) {
      this._map_i64 = new java.util.HashMap<java.lang.String,java.lang.Long>();
    }
    this._map_i64.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.Long> get_map_i64() {
    return this._map_i64;
  }

  public ThriftMessage set_map_i64(java.util.Map<java.lang.String,java.lang.Long> _map_i64) {
    this._map_i64 = _map_i64;
    return this;
  }

  public void unset_map_i64() {
    this._map_i64 = null;
  }

  /** Returns true if field _map_i64 is set (has been assigned a value) and false otherwise */
  public boolean isSet_map_i64() {
    return this._map_i64 != null;
  }

  public void set_map_i64IsSet(boolean value) {
    if (!value) {
      this._map_i64 = null;
    }
  }

  public int get_map_doubleSize() {
    return (this._map_double == null) ? 0 : this._map_double.size();
  }

  public void putTo_map_double(java.lang.String key, double val) {
    if (this._map_double == null) {
      this._map_double = new java.util.HashMap<java.lang.String,java.lang.Double>();
    }
    this._map_double.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.Double> get_map_double() {
    return this._map_double;
  }

  public ThriftMessage set_map_double(java.util.Map<java.lang.String,java.lang.Double> _map_double) {
    this._map_double = _map_double;
    return this;
  }

  public void unset_map_double() {
    this._map_double = null;
  }

  /** Returns true if field _map_double is set (has been assigned a value) and false otherwise */
  public boolean isSet_map_double() {
    return this._map_double != null;
  }

  public void set_map_doubleIsSet(boolean value) {
    if (!value) {
      this._map_double = null;
    }
  }

  public int get_map_stringSize() {
    return (this._map_string == null) ? 0 : this._map_string.size();
  }

  public void putTo_map_string(java.lang.String key, java.lang.String val) {
    if (this._map_string == null) {
      this._map_string = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this._map_string.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> get_map_string() {
    return this._map_string;
  }

  public ThriftMessage set_map_string(java.util.Map<java.lang.String,java.lang.String> _map_string) {
    this._map_string = _map_string;
    return this;
  }

  public void unset_map_string() {
    this._map_string = null;
  }

  /** Returns true if field _map_string is set (has been assigned a value) and false otherwise */
  public boolean isSet_map_string() {
    return this._map_string != null;
  }

  public void set_map_stringIsSet(boolean value) {
    if (!value) {
      this._map_string = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case _SENDER_ID:
      if (value == null) {
        unset_sender_id();
      } else {
        set_sender_id((java.lang.String)value);
      }
      break;

    case _RECEIVER_ID:
      if (value == null) {
        unset_receiver_id();
      } else {
        set_receiver_id((java.lang.String)value);
      }
      break;

    case _TIMESTAMP:
      if (value == null) {
        unset_timestamp();
      } else {
        set_timestamp((java.lang.String)value);
      }
      break;

    case _SUBJECT:
      if (value == null) {
        unset_subject();
      } else {
        set_subject((java.lang.String)value);
      }
      break;

    case _SEQUENCE_NO:
      if (value == null) {
        unset_sequence_no();
      } else {
        set_sequence_no((java.lang.Long)value);
      }
      break;

    case _TOTAL_COUNT:
      if (value == null) {
        unset_total_count();
      } else {
        set_total_count((java.lang.Long)value);
      }
      break;

    case _BINARY:
      if (value == null) {
        unset_binary();
      } else {
        if (value instanceof byte[]) {
          set_binary((byte[])value);
        } else {
          set_binary((java.nio.ByteBuffer)value);
        }
      }
      break;

    case _PAYLOAD:
      if (value == null) {
        unset_payload();
      } else {
        set_payload((java.lang.String)value);
      }
      break;

    case _LIST_MESSAGE:
      if (value == null) {
        unset_list_message();
      } else {
        set_list_message((java.util.List<ThriftMessage>)value);
      }
      break;

    case _SET_MESSAGE:
      if (value == null) {
        unset_set_message();
      } else {
        set_set_message((java.util.Set<ThriftMessage>)value);
      }
      break;

    case _MAP_MESSAGE:
      if (value == null) {
        unset_map_message();
      } else {
        set_map_message((java.util.Map<java.lang.String,ThriftMessage>)value);
      }
      break;

    case _LIST_BOOL:
      if (value == null) {
        unset_list_bool();
      } else {
        set_list_bool((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case _LIST_I16:
      if (value == null) {
        unset_list_i16();
      } else {
        set_list_i16((java.util.List<java.lang.Short>)value);
      }
      break;

    case _LIST_I32:
      if (value == null) {
        unset_list_i32();
      } else {
        set_list_i32((java.util.List<java.lang.Integer>)value);
      }
      break;

    case _LIST_I64:
      if (value == null) {
        unset_list_i64();
      } else {
        set_list_i64((java.util.List<java.lang.Long>)value);
      }
      break;

    case _LIST_DOUBLE:
      if (value == null) {
        unset_list_double();
      } else {
        set_list_double((java.util.List<java.lang.Double>)value);
      }
      break;

    case _LIST_STRING:
      if (value == null) {
        unset_list_string();
      } else {
        set_list_string((java.util.List<java.lang.String>)value);
      }
      break;

    case _SET_BOOL:
      if (value == null) {
        unset_set_bool();
      } else {
        set_set_bool((java.util.Set<java.lang.Boolean>)value);
      }
      break;

    case _SET_I16:
      if (value == null) {
        unset_set_i16();
      } else {
        set_set_i16((java.util.Set<java.lang.Short>)value);
      }
      break;

    case _SET_I32:
      if (value == null) {
        unset_set_i32();
      } else {
        set_set_i32((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case _SET_I64:
      if (value == null) {
        unset_set_i64();
      } else {
        set_set_i64((java.util.Set<java.lang.Long>)value);
      }
      break;

    case _SET_DOUBLE:
      if (value == null) {
        unset_set_double();
      } else {
        set_set_double((java.util.Set<java.lang.Double>)value);
      }
      break;

    case _SET_STRING:
      if (value == null) {
        unset_set_string();
      } else {
        set_set_string((java.util.Set<java.lang.String>)value);
      }
      break;

    case _MAP_BOOL:
      if (value == null) {
        unset_map_bool();
      } else {
        set_map_bool((java.util.Map<java.lang.String,java.lang.Boolean>)value);
      }
      break;

    case _MAP_I16:
      if (value == null) {
        unset_map_i16();
      } else {
        set_map_i16((java.util.Map<java.lang.String,java.lang.Short>)value);
      }
      break;

    case _MAP_I32:
      if (value == null) {
        unset_map_i32();
      } else {
        set_map_i32((java.util.Map<java.lang.String,java.lang.Integer>)value);
      }
      break;

    case _MAP_I64:
      if (value == null) {
        unset_map_i64();
      } else {
        set_map_i64((java.util.Map<java.lang.String,java.lang.Long>)value);
      }
      break;

    case _MAP_DOUBLE:
      if (value == null) {
        unset_map_double();
      } else {
        set_map_double((java.util.Map<java.lang.String,java.lang.Double>)value);
      }
      break;

    case _MAP_STRING:
      if (value == null) {
        unset_map_string();
      } else {
        set_map_string((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _SENDER_ID:
      return get_sender_id();

    case _RECEIVER_ID:
      return get_receiver_id();

    case _TIMESTAMP:
      return get_timestamp();

    case _SUBJECT:
      return get_subject();

    case _SEQUENCE_NO:
      return get_sequence_no();

    case _TOTAL_COUNT:
      return get_total_count();

    case _BINARY:
      return get_binary();

    case _PAYLOAD:
      return get_payload();

    case _LIST_MESSAGE:
      return get_list_message();

    case _SET_MESSAGE:
      return get_set_message();

    case _MAP_MESSAGE:
      return get_map_message();

    case _LIST_BOOL:
      return get_list_bool();

    case _LIST_I16:
      return get_list_i16();

    case _LIST_I32:
      return get_list_i32();

    case _LIST_I64:
      return get_list_i64();

    case _LIST_DOUBLE:
      return get_list_double();

    case _LIST_STRING:
      return get_list_string();

    case _SET_BOOL:
      return get_set_bool();

    case _SET_I16:
      return get_set_i16();

    case _SET_I32:
      return get_set_i32();

    case _SET_I64:
      return get_set_i64();

    case _SET_DOUBLE:
      return get_set_double();

    case _SET_STRING:
      return get_set_string();

    case _MAP_BOOL:
      return get_map_bool();

    case _MAP_I16:
      return get_map_i16();

    case _MAP_I32:
      return get_map_i32();

    case _MAP_I64:
      return get_map_i64();

    case _MAP_DOUBLE:
      return get_map_double();

    case _MAP_STRING:
      return get_map_string();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _SENDER_ID:
      return isSet_sender_id();
    case _RECEIVER_ID:
      return isSet_receiver_id();
    case _TIMESTAMP:
      return isSet_timestamp();
    case _SUBJECT:
      return isSet_subject();
    case _SEQUENCE_NO:
      return isSet_sequence_no();
    case _TOTAL_COUNT:
      return isSet_total_count();
    case _BINARY:
      return isSet_binary();
    case _PAYLOAD:
      return isSet_payload();
    case _LIST_MESSAGE:
      return isSet_list_message();
    case _SET_MESSAGE:
      return isSet_set_message();
    case _MAP_MESSAGE:
      return isSet_map_message();
    case _LIST_BOOL:
      return isSet_list_bool();
    case _LIST_I16:
      return isSet_list_i16();
    case _LIST_I32:
      return isSet_list_i32();
    case _LIST_I64:
      return isSet_list_i64();
    case _LIST_DOUBLE:
      return isSet_list_double();
    case _LIST_STRING:
      return isSet_list_string();
    case _SET_BOOL:
      return isSet_set_bool();
    case _SET_I16:
      return isSet_set_i16();
    case _SET_I32:
      return isSet_set_i32();
    case _SET_I64:
      return isSet_set_i64();
    case _SET_DOUBLE:
      return isSet_set_double();
    case _SET_STRING:
      return isSet_set_string();
    case _MAP_BOOL:
      return isSet_map_bool();
    case _MAP_I16:
      return isSet_map_i16();
    case _MAP_I32:
      return isSet_map_i32();
    case _MAP_I64:
      return isSet_map_i64();
    case _MAP_DOUBLE:
      return isSet_map_double();
    case _MAP_STRING:
      return isSet_map_string();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftMessage)
      return this.equals((ThriftMessage)that);
    return false;
  }

  public boolean equals(ThriftMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__sender_id = true && this.isSet_sender_id();
    boolean that_present__sender_id = true && that.isSet_sender_id();
    if (this_present__sender_id || that_present__sender_id) {
      if (!(this_present__sender_id && that_present__sender_id))
        return false;
      if (!this._sender_id.equals(that._sender_id))
        return false;
    }

    boolean this_present__receiver_id = true && this.isSet_receiver_id();
    boolean that_present__receiver_id = true && that.isSet_receiver_id();
    if (this_present__receiver_id || that_present__receiver_id) {
      if (!(this_present__receiver_id && that_present__receiver_id))
        return false;
      if (!this._receiver_id.equals(that._receiver_id))
        return false;
    }

    boolean this_present__timestamp = true && this.isSet_timestamp();
    boolean that_present__timestamp = true && that.isSet_timestamp();
    if (this_present__timestamp || that_present__timestamp) {
      if (!(this_present__timestamp && that_present__timestamp))
        return false;
      if (!this._timestamp.equals(that._timestamp))
        return false;
    }

    boolean this_present__subject = true && this.isSet_subject();
    boolean that_present__subject = true && that.isSet_subject();
    if (this_present__subject || that_present__subject) {
      if (!(this_present__subject && that_present__subject))
        return false;
      if (!this._subject.equals(that._subject))
        return false;
    }

    boolean this_present__sequence_no = true && this.isSet_sequence_no();
    boolean that_present__sequence_no = true && that.isSet_sequence_no();
    if (this_present__sequence_no || that_present__sequence_no) {
      if (!(this_present__sequence_no && that_present__sequence_no))
        return false;
      if (this._sequence_no != that._sequence_no)
        return false;
    }

    boolean this_present__total_count = true && this.isSet_total_count();
    boolean that_present__total_count = true && that.isSet_total_count();
    if (this_present__total_count || that_present__total_count) {
      if (!(this_present__total_count && that_present__total_count))
        return false;
      if (this._total_count != that._total_count)
        return false;
    }

    boolean this_present__binary = true && this.isSet_binary();
    boolean that_present__binary = true && that.isSet_binary();
    if (this_present__binary || that_present__binary) {
      if (!(this_present__binary && that_present__binary))
        return false;
      if (!this._binary.equals(that._binary))
        return false;
    }

    boolean this_present__payload = true && this.isSet_payload();
    boolean that_present__payload = true && that.isSet_payload();
    if (this_present__payload || that_present__payload) {
      if (!(this_present__payload && that_present__payload))
        return false;
      if (!this._payload.equals(that._payload))
        return false;
    }

    boolean this_present__list_message = true && this.isSet_list_message();
    boolean that_present__list_message = true && that.isSet_list_message();
    if (this_present__list_message || that_present__list_message) {
      if (!(this_present__list_message && that_present__list_message))
        return false;
      if (!this._list_message.equals(that._list_message))
        return false;
    }

    boolean this_present__set_message = true && this.isSet_set_message();
    boolean that_present__set_message = true && that.isSet_set_message();
    if (this_present__set_message || that_present__set_message) {
      if (!(this_present__set_message && that_present__set_message))
        return false;
      if (!this._set_message.equals(that._set_message))
        return false;
    }

    boolean this_present__map_message = true && this.isSet_map_message();
    boolean that_present__map_message = true && that.isSet_map_message();
    if (this_present__map_message || that_present__map_message) {
      if (!(this_present__map_message && that_present__map_message))
        return false;
      if (!this._map_message.equals(that._map_message))
        return false;
    }

    boolean this_present__list_bool = true && this.isSet_list_bool();
    boolean that_present__list_bool = true && that.isSet_list_bool();
    if (this_present__list_bool || that_present__list_bool) {
      if (!(this_present__list_bool && that_present__list_bool))
        return false;
      if (!this._list_bool.equals(that._list_bool))
        return false;
    }

    boolean this_present__list_i16 = true && this.isSet_list_i16();
    boolean that_present__list_i16 = true && that.isSet_list_i16();
    if (this_present__list_i16 || that_present__list_i16) {
      if (!(this_present__list_i16 && that_present__list_i16))
        return false;
      if (!this._list_i16.equals(that._list_i16))
        return false;
    }

    boolean this_present__list_i32 = true && this.isSet_list_i32();
    boolean that_present__list_i32 = true && that.isSet_list_i32();
    if (this_present__list_i32 || that_present__list_i32) {
      if (!(this_present__list_i32 && that_present__list_i32))
        return false;
      if (!this._list_i32.equals(that._list_i32))
        return false;
    }

    boolean this_present__list_i64 = true && this.isSet_list_i64();
    boolean that_present__list_i64 = true && that.isSet_list_i64();
    if (this_present__list_i64 || that_present__list_i64) {
      if (!(this_present__list_i64 && that_present__list_i64))
        return false;
      if (!this._list_i64.equals(that._list_i64))
        return false;
    }

    boolean this_present__list_double = true && this.isSet_list_double();
    boolean that_present__list_double = true && that.isSet_list_double();
    if (this_present__list_double || that_present__list_double) {
      if (!(this_present__list_double && that_present__list_double))
        return false;
      if (!this._list_double.equals(that._list_double))
        return false;
    }

    boolean this_present__list_string = true && this.isSet_list_string();
    boolean that_present__list_string = true && that.isSet_list_string();
    if (this_present__list_string || that_present__list_string) {
      if (!(this_present__list_string && that_present__list_string))
        return false;
      if (!this._list_string.equals(that._list_string))
        return false;
    }

    boolean this_present__set_bool = true && this.isSet_set_bool();
    boolean that_present__set_bool = true && that.isSet_set_bool();
    if (this_present__set_bool || that_present__set_bool) {
      if (!(this_present__set_bool && that_present__set_bool))
        return false;
      if (!this._set_bool.equals(that._set_bool))
        return false;
    }

    boolean this_present__set_i16 = true && this.isSet_set_i16();
    boolean that_present__set_i16 = true && that.isSet_set_i16();
    if (this_present__set_i16 || that_present__set_i16) {
      if (!(this_present__set_i16 && that_present__set_i16))
        return false;
      if (!this._set_i16.equals(that._set_i16))
        return false;
    }

    boolean this_present__set_i32 = true && this.isSet_set_i32();
    boolean that_present__set_i32 = true && that.isSet_set_i32();
    if (this_present__set_i32 || that_present__set_i32) {
      if (!(this_present__set_i32 && that_present__set_i32))
        return false;
      if (!this._set_i32.equals(that._set_i32))
        return false;
    }

    boolean this_present__set_i64 = true && this.isSet_set_i64();
    boolean that_present__set_i64 = true && that.isSet_set_i64();
    if (this_present__set_i64 || that_present__set_i64) {
      if (!(this_present__set_i64 && that_present__set_i64))
        return false;
      if (!this._set_i64.equals(that._set_i64))
        return false;
    }

    boolean this_present__set_double = true && this.isSet_set_double();
    boolean that_present__set_double = true && that.isSet_set_double();
    if (this_present__set_double || that_present__set_double) {
      if (!(this_present__set_double && that_present__set_double))
        return false;
      if (!this._set_double.equals(that._set_double))
        return false;
    }

    boolean this_present__set_string = true && this.isSet_set_string();
    boolean that_present__set_string = true && that.isSet_set_string();
    if (this_present__set_string || that_present__set_string) {
      if (!(this_present__set_string && that_present__set_string))
        return false;
      if (!this._set_string.equals(that._set_string))
        return false;
    }

    boolean this_present__map_bool = true && this.isSet_map_bool();
    boolean that_present__map_bool = true && that.isSet_map_bool();
    if (this_present__map_bool || that_present__map_bool) {
      if (!(this_present__map_bool && that_present__map_bool))
        return false;
      if (!this._map_bool.equals(that._map_bool))
        return false;
    }

    boolean this_present__map_i16 = true && this.isSet_map_i16();
    boolean that_present__map_i16 = true && that.isSet_map_i16();
    if (this_present__map_i16 || that_present__map_i16) {
      if (!(this_present__map_i16 && that_present__map_i16))
        return false;
      if (!this._map_i16.equals(that._map_i16))
        return false;
    }

    boolean this_present__map_i32 = true && this.isSet_map_i32();
    boolean that_present__map_i32 = true && that.isSet_map_i32();
    if (this_present__map_i32 || that_present__map_i32) {
      if (!(this_present__map_i32 && that_present__map_i32))
        return false;
      if (!this._map_i32.equals(that._map_i32))
        return false;
    }

    boolean this_present__map_i64 = true && this.isSet_map_i64();
    boolean that_present__map_i64 = true && that.isSet_map_i64();
    if (this_present__map_i64 || that_present__map_i64) {
      if (!(this_present__map_i64 && that_present__map_i64))
        return false;
      if (!this._map_i64.equals(that._map_i64))
        return false;
    }

    boolean this_present__map_double = true && this.isSet_map_double();
    boolean that_present__map_double = true && that.isSet_map_double();
    if (this_present__map_double || that_present__map_double) {
      if (!(this_present__map_double && that_present__map_double))
        return false;
      if (!this._map_double.equals(that._map_double))
        return false;
    }

    boolean this_present__map_string = true && this.isSet_map_string();
    boolean that_present__map_string = true && that.isSet_map_string();
    if (this_present__map_string || that_present__map_string) {
      if (!(this_present__map_string && that_present__map_string))
        return false;
      if (!this._map_string.equals(that._map_string))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_sender_id()) ? 131071 : 524287);
    if (isSet_sender_id())
      hashCode = hashCode * 8191 + _sender_id.hashCode();

    hashCode = hashCode * 8191 + ((isSet_receiver_id()) ? 131071 : 524287);
    if (isSet_receiver_id())
      hashCode = hashCode * 8191 + _receiver_id.hashCode();

    hashCode = hashCode * 8191 + ((isSet_timestamp()) ? 131071 : 524287);
    if (isSet_timestamp())
      hashCode = hashCode * 8191 + _timestamp.hashCode();

    hashCode = hashCode * 8191 + ((isSet_subject()) ? 131071 : 524287);
    if (isSet_subject())
      hashCode = hashCode * 8191 + _subject.hashCode();

    hashCode = hashCode * 8191 + ((isSet_sequence_no()) ? 131071 : 524287);
    if (isSet_sequence_no())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_sequence_no);

    hashCode = hashCode * 8191 + ((isSet_total_count()) ? 131071 : 524287);
    if (isSet_total_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_total_count);

    hashCode = hashCode * 8191 + ((isSet_binary()) ? 131071 : 524287);
    if (isSet_binary())
      hashCode = hashCode * 8191 + _binary.hashCode();

    hashCode = hashCode * 8191 + ((isSet_payload()) ? 131071 : 524287);
    if (isSet_payload())
      hashCode = hashCode * 8191 + _payload.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_message()) ? 131071 : 524287);
    if (isSet_list_message())
      hashCode = hashCode * 8191 + _list_message.hashCode();

    hashCode = hashCode * 8191 + ((isSet_set_message()) ? 131071 : 524287);
    if (isSet_set_message())
      hashCode = hashCode * 8191 + _set_message.hashCode();

    hashCode = hashCode * 8191 + ((isSet_map_message()) ? 131071 : 524287);
    if (isSet_map_message())
      hashCode = hashCode * 8191 + _map_message.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_bool()) ? 131071 : 524287);
    if (isSet_list_bool())
      hashCode = hashCode * 8191 + _list_bool.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_i16()) ? 131071 : 524287);
    if (isSet_list_i16())
      hashCode = hashCode * 8191 + _list_i16.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_i32()) ? 131071 : 524287);
    if (isSet_list_i32())
      hashCode = hashCode * 8191 + _list_i32.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_i64()) ? 131071 : 524287);
    if (isSet_list_i64())
      hashCode = hashCode * 8191 + _list_i64.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_double()) ? 131071 : 524287);
    if (isSet_list_double())
      hashCode = hashCode * 8191 + _list_double.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_string()) ? 131071 : 524287);
    if (isSet_list_string())
      hashCode = hashCode * 8191 + _list_string.hashCode();

    hashCode = hashCode * 8191 + ((isSet_set_bool()) ? 131071 : 524287);
    if (isSet_set_bool())
      hashCode = hashCode * 8191 + _set_bool.hashCode();

    hashCode = hashCode * 8191 + ((isSet_set_i16()) ? 131071 : 524287);
    if (isSet_set_i16())
      hashCode = hashCode * 8191 + _set_i16.hashCode();

    hashCode = hashCode * 8191 + ((isSet_set_i32()) ? 131071 : 524287);
    if (isSet_set_i32())
      hashCode = hashCode * 8191 + _set_i32.hashCode();

    hashCode = hashCode * 8191 + ((isSet_set_i64()) ? 131071 : 524287);
    if (isSet_set_i64())
      hashCode = hashCode * 8191 + _set_i64.hashCode();

    hashCode = hashCode * 8191 + ((isSet_set_double()) ? 131071 : 524287);
    if (isSet_set_double())
      hashCode = hashCode * 8191 + _set_double.hashCode();

    hashCode = hashCode * 8191 + ((isSet_set_string()) ? 131071 : 524287);
    if (isSet_set_string())
      hashCode = hashCode * 8191 + _set_string.hashCode();

    hashCode = hashCode * 8191 + ((isSet_map_bool()) ? 131071 : 524287);
    if (isSet_map_bool())
      hashCode = hashCode * 8191 + _map_bool.hashCode();

    hashCode = hashCode * 8191 + ((isSet_map_i16()) ? 131071 : 524287);
    if (isSet_map_i16())
      hashCode = hashCode * 8191 + _map_i16.hashCode();

    hashCode = hashCode * 8191 + ((isSet_map_i32()) ? 131071 : 524287);
    if (isSet_map_i32())
      hashCode = hashCode * 8191 + _map_i32.hashCode();

    hashCode = hashCode * 8191 + ((isSet_map_i64()) ? 131071 : 524287);
    if (isSet_map_i64())
      hashCode = hashCode * 8191 + _map_i64.hashCode();

    hashCode = hashCode * 8191 + ((isSet_map_double()) ? 131071 : 524287);
    if (isSet_map_double())
      hashCode = hashCode * 8191 + _map_double.hashCode();

    hashCode = hashCode * 8191 + ((isSet_map_string()) ? 131071 : 524287);
    if (isSet_map_string())
      hashCode = hashCode * 8191 + _map_string.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_sender_id()).compareTo(other.isSet_sender_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_sender_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sender_id, other._sender_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_receiver_id()).compareTo(other.isSet_receiver_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_receiver_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._receiver_id, other._receiver_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_timestamp()).compareTo(other.isSet_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._timestamp, other._timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_subject()).compareTo(other.isSet_subject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_subject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._subject, other._subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_sequence_no()).compareTo(other.isSet_sequence_no());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_sequence_no()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sequence_no, other._sequence_no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_total_count()).compareTo(other.isSet_total_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_total_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._total_count, other._total_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_binary()).compareTo(other.isSet_binary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_binary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._binary, other._binary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_payload()).compareTo(other.isSet_payload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_payload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._payload, other._payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_message()).compareTo(other.isSet_list_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_message, other._list_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_set_message()).compareTo(other.isSet_set_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_set_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._set_message, other._set_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_map_message()).compareTo(other.isSet_map_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_map_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._map_message, other._map_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_bool()).compareTo(other.isSet_list_bool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_bool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_bool, other._list_bool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_i16()).compareTo(other.isSet_list_i16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_i16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_i16, other._list_i16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_i32()).compareTo(other.isSet_list_i32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_i32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_i32, other._list_i32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_i64()).compareTo(other.isSet_list_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_i64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_i64, other._list_i64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_double()).compareTo(other.isSet_list_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_double, other._list_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_string()).compareTo(other.isSet_list_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_string, other._list_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_set_bool()).compareTo(other.isSet_set_bool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_set_bool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._set_bool, other._set_bool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_set_i16()).compareTo(other.isSet_set_i16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_set_i16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._set_i16, other._set_i16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_set_i32()).compareTo(other.isSet_set_i32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_set_i32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._set_i32, other._set_i32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_set_i64()).compareTo(other.isSet_set_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_set_i64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._set_i64, other._set_i64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_set_double()).compareTo(other.isSet_set_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_set_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._set_double, other._set_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_set_string()).compareTo(other.isSet_set_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_set_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._set_string, other._set_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_map_bool()).compareTo(other.isSet_map_bool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_map_bool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._map_bool, other._map_bool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_map_i16()).compareTo(other.isSet_map_i16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_map_i16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._map_i16, other._map_i16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_map_i32()).compareTo(other.isSet_map_i32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_map_i32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._map_i32, other._map_i32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_map_i64()).compareTo(other.isSet_map_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_map_i64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._map_i64, other._map_i64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_map_double()).compareTo(other.isSet_map_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_map_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._map_double, other._map_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_map_string()).compareTo(other.isSet_map_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_map_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._map_string, other._map_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftMessage(");
    boolean first = true;

    sb.append("_sender_id:");
    if (this._sender_id == null) {
      sb.append("null");
    } else {
      sb.append(this._sender_id);
    }
    first = false;
    if (isSet_receiver_id()) {
      if (!first) sb.append(", ");
      sb.append("_receiver_id:");
      if (this._receiver_id == null) {
        sb.append("null");
      } else {
        sb.append(this._receiver_id);
      }
      first = false;
    }
    if (isSet_timestamp()) {
      if (!first) sb.append(", ");
      sb.append("_timestamp:");
      if (this._timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this._timestamp);
      }
      first = false;
    }
    if (isSet_subject()) {
      if (!first) sb.append(", ");
      sb.append("_subject:");
      if (this._subject == null) {
        sb.append("null");
      } else {
        sb.append(this._subject);
      }
      first = false;
    }
    if (isSet_sequence_no()) {
      if (!first) sb.append(", ");
      sb.append("_sequence_no:");
      sb.append(this._sequence_no);
      first = false;
    }
    if (isSet_total_count()) {
      if (!first) sb.append(", ");
      sb.append("_total_count:");
      sb.append(this._total_count);
      first = false;
    }
    if (isSet_binary()) {
      if (!first) sb.append(", ");
      sb.append("_binary:");
      if (this._binary == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this._binary, sb);
      }
      first = false;
    }
    if (isSet_payload()) {
      if (!first) sb.append(", ");
      sb.append("_payload:");
      if (this._payload == null) {
        sb.append("null");
      } else {
        sb.append(this._payload);
      }
      first = false;
    }
    if (isSet_list_message()) {
      if (!first) sb.append(", ");
      sb.append("_list_message:");
      if (this._list_message == null) {
        sb.append("null");
      } else {
        sb.append(this._list_message);
      }
      first = false;
    }
    if (isSet_set_message()) {
      if (!first) sb.append(", ");
      sb.append("_set_message:");
      if (this._set_message == null) {
        sb.append("null");
      } else {
        sb.append(this._set_message);
      }
      first = false;
    }
    if (isSet_map_message()) {
      if (!first) sb.append(", ");
      sb.append("_map_message:");
      if (this._map_message == null) {
        sb.append("null");
      } else {
        sb.append(this._map_message);
      }
      first = false;
    }
    if (isSet_list_bool()) {
      if (!first) sb.append(", ");
      sb.append("_list_bool:");
      if (this._list_bool == null) {
        sb.append("null");
      } else {
        sb.append(this._list_bool);
      }
      first = false;
    }
    if (isSet_list_i16()) {
      if (!first) sb.append(", ");
      sb.append("_list_i16:");
      if (this._list_i16 == null) {
        sb.append("null");
      } else {
        sb.append(this._list_i16);
      }
      first = false;
    }
    if (isSet_list_i32()) {
      if (!first) sb.append(", ");
      sb.append("_list_i32:");
      if (this._list_i32 == null) {
        sb.append("null");
      } else {
        sb.append(this._list_i32);
      }
      first = false;
    }
    if (isSet_list_i64()) {
      if (!first) sb.append(", ");
      sb.append("_list_i64:");
      if (this._list_i64 == null) {
        sb.append("null");
      } else {
        sb.append(this._list_i64);
      }
      first = false;
    }
    if (isSet_list_double()) {
      if (!first) sb.append(", ");
      sb.append("_list_double:");
      if (this._list_double == null) {
        sb.append("null");
      } else {
        sb.append(this._list_double);
      }
      first = false;
    }
    if (isSet_list_string()) {
      if (!first) sb.append(", ");
      sb.append("_list_string:");
      if (this._list_string == null) {
        sb.append("null");
      } else {
        sb.append(this._list_string);
      }
      first = false;
    }
    if (isSet_set_bool()) {
      if (!first) sb.append(", ");
      sb.append("_set_bool:");
      if (this._set_bool == null) {
        sb.append("null");
      } else {
        sb.append(this._set_bool);
      }
      first = false;
    }
    if (isSet_set_i16()) {
      if (!first) sb.append(", ");
      sb.append("_set_i16:");
      if (this._set_i16 == null) {
        sb.append("null");
      } else {
        sb.append(this._set_i16);
      }
      first = false;
    }
    if (isSet_set_i32()) {
      if (!first) sb.append(", ");
      sb.append("_set_i32:");
      if (this._set_i32 == null) {
        sb.append("null");
      } else {
        sb.append(this._set_i32);
      }
      first = false;
    }
    if (isSet_set_i64()) {
      if (!first) sb.append(", ");
      sb.append("_set_i64:");
      if (this._set_i64 == null) {
        sb.append("null");
      } else {
        sb.append(this._set_i64);
      }
      first = false;
    }
    if (isSet_set_double()) {
      if (!first) sb.append(", ");
      sb.append("_set_double:");
      if (this._set_double == null) {
        sb.append("null");
      } else {
        sb.append(this._set_double);
      }
      first = false;
    }
    if (isSet_set_string()) {
      if (!first) sb.append(", ");
      sb.append("_set_string:");
      if (this._set_string == null) {
        sb.append("null");
      } else {
        sb.append(this._set_string);
      }
      first = false;
    }
    if (isSet_map_bool()) {
      if (!first) sb.append(", ");
      sb.append("_map_bool:");
      if (this._map_bool == null) {
        sb.append("null");
      } else {
        sb.append(this._map_bool);
      }
      first = false;
    }
    if (isSet_map_i16()) {
      if (!first) sb.append(", ");
      sb.append("_map_i16:");
      if (this._map_i16 == null) {
        sb.append("null");
      } else {
        sb.append(this._map_i16);
      }
      first = false;
    }
    if (isSet_map_i32()) {
      if (!first) sb.append(", ");
      sb.append("_map_i32:");
      if (this._map_i32 == null) {
        sb.append("null");
      } else {
        sb.append(this._map_i32);
      }
      first = false;
    }
    if (isSet_map_i64()) {
      if (!first) sb.append(", ");
      sb.append("_map_i64:");
      if (this._map_i64 == null) {
        sb.append("null");
      } else {
        sb.append(this._map_i64);
      }
      first = false;
    }
    if (isSet_map_double()) {
      if (!first) sb.append(", ");
      sb.append("_map_double:");
      if (this._map_double == null) {
        sb.append("null");
      } else {
        sb.append(this._map_double);
      }
      first = false;
    }
    if (isSet_map_string()) {
      if (!first) sb.append(", ");
      sb.append("_map_string:");
      if (this._map_string == null) {
        sb.append("null");
      } else {
        sb.append(this._map_string);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (_sender_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_sender_id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftMessageStandardScheme getScheme() {
      return new ThriftMessageStandardScheme();
    }
  }

  private static class ThriftMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _SENDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._sender_id = iprot.readString();
              struct.set_sender_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _RECEIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._receiver_id = iprot.readString();
              struct.set_receiver_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._timestamp = iprot.readString();
              struct.set_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._subject = iprot.readString();
              struct.set_subjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._sequence_no = iprot.readI64();
              struct.set_sequence_noIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._total_count = iprot.readI64();
              struct.set_total_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._binary = iprot.readBinary();
              struct.set_binaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._payload = iprot.readString();
              struct.set_payloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _LIST_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._list_message = new java.util.ArrayList<ThriftMessage>(_list0.size);
                ThriftMessage _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ThriftMessage();
                  _elem1.read(iprot);
                  struct._list_message.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.set_list_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _SET_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct._set_message = new java.util.HashSet<ThriftMessage>(2*_set3.size);
                ThriftMessage _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = new ThriftMessage();
                  _elem4.read(iprot);
                  struct._set_message.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.set_set_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _MAP_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct._map_message = new java.util.HashMap<java.lang.String,ThriftMessage>(2*_map6.size);
                java.lang.String _key7;
                ThriftMessage _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readString();
                  _val8 = new ThriftMessage();
                  _val8.read(iprot);
                  struct._map_message.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.set_map_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _LIST_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct._list_bool = new java.util.ArrayList<java.lang.Boolean>(_list10.size);
                boolean _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = iprot.readBool();
                  struct._list_bool.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.set_list_boolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _LIST_I16
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct._list_i16 = new java.util.ArrayList<java.lang.Short>(_list13.size);
                short _elem14;
                for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                {
                  _elem14 = iprot.readI16();
                  struct._list_i16.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.set_list_i16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // _LIST_I32
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct._list_i32 = new java.util.ArrayList<java.lang.Integer>(_list16.size);
                int _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI32();
                  struct._list_i32.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.set_list_i32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // _LIST_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct._list_i64 = new java.util.ArrayList<java.lang.Long>(_list19.size);
                long _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readI64();
                  struct._list_i64.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.set_list_i64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // _LIST_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct._list_double = new java.util.ArrayList<java.lang.Double>(_list22.size);
                double _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = iprot.readDouble();
                  struct._list_double.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.set_list_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // _LIST_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct._list_string = new java.util.ArrayList<java.lang.String>(_list25.size);
                java.lang.String _elem26;
                for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                {
                  _elem26 = iprot.readString();
                  struct._list_string.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.set_list_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // _SET_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set28 = iprot.readSetBegin();
                struct._set_bool = new java.util.HashSet<java.lang.Boolean>(2*_set28.size);
                boolean _elem29;
                for (int _i30 = 0; _i30 < _set28.size; ++_i30)
                {
                  _elem29 = iprot.readBool();
                  struct._set_bool.add(_elem29);
                }
                iprot.readSetEnd();
              }
              struct.set_set_boolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // _SET_I16
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set31 = iprot.readSetBegin();
                struct._set_i16 = new java.util.HashSet<java.lang.Short>(2*_set31.size);
                short _elem32;
                for (int _i33 = 0; _i33 < _set31.size; ++_i33)
                {
                  _elem32 = iprot.readI16();
                  struct._set_i16.add(_elem32);
                }
                iprot.readSetEnd();
              }
              struct.set_set_i16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // _SET_I32
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set34 = iprot.readSetBegin();
                struct._set_i32 = new java.util.HashSet<java.lang.Integer>(2*_set34.size);
                int _elem35;
                for (int _i36 = 0; _i36 < _set34.size; ++_i36)
                {
                  _elem35 = iprot.readI32();
                  struct._set_i32.add(_elem35);
                }
                iprot.readSetEnd();
              }
              struct.set_set_i32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // _SET_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set37 = iprot.readSetBegin();
                struct._set_i64 = new java.util.HashSet<java.lang.Long>(2*_set37.size);
                long _elem38;
                for (int _i39 = 0; _i39 < _set37.size; ++_i39)
                {
                  _elem38 = iprot.readI64();
                  struct._set_i64.add(_elem38);
                }
                iprot.readSetEnd();
              }
              struct.set_set_i64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // _SET_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set40 = iprot.readSetBegin();
                struct._set_double = new java.util.HashSet<java.lang.Double>(2*_set40.size);
                double _elem41;
                for (int _i42 = 0; _i42 < _set40.size; ++_i42)
                {
                  _elem41 = iprot.readDouble();
                  struct._set_double.add(_elem41);
                }
                iprot.readSetEnd();
              }
              struct.set_set_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // _SET_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set43 = iprot.readSetBegin();
                struct._set_string = new java.util.HashSet<java.lang.String>(2*_set43.size);
                java.lang.String _elem44;
                for (int _i45 = 0; _i45 < _set43.size; ++_i45)
                {
                  _elem44 = iprot.readString();
                  struct._set_string.add(_elem44);
                }
                iprot.readSetEnd();
              }
              struct.set_set_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // _MAP_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin();
                struct._map_bool = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map46.size);
                java.lang.String _key47;
                boolean _val48;
                for (int _i49 = 0; _i49 < _map46.size; ++_i49)
                {
                  _key47 = iprot.readString();
                  _val48 = iprot.readBool();
                  struct._map_bool.put(_key47, _val48);
                }
                iprot.readMapEnd();
              }
              struct.set_map_boolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // _MAP_I16
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                struct._map_i16 = new java.util.HashMap<java.lang.String,java.lang.Short>(2*_map50.size);
                java.lang.String _key51;
                short _val52;
                for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                {
                  _key51 = iprot.readString();
                  _val52 = iprot.readI16();
                  struct._map_i16.put(_key51, _val52);
                }
                iprot.readMapEnd();
              }
              struct.set_map_i16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // _MAP_I32
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                struct._map_i32 = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map54.size);
                java.lang.String _key55;
                int _val56;
                for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                {
                  _key55 = iprot.readString();
                  _val56 = iprot.readI32();
                  struct._map_i32.put(_key55, _val56);
                }
                iprot.readMapEnd();
              }
              struct.set_map_i32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // _MAP_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                struct._map_i64 = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map58.size);
                java.lang.String _key59;
                long _val60;
                for (int _i61 = 0; _i61 < _map58.size; ++_i61)
                {
                  _key59 = iprot.readString();
                  _val60 = iprot.readI64();
                  struct._map_i64.put(_key59, _val60);
                }
                iprot.readMapEnd();
              }
              struct.set_map_i64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // _MAP_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map62 = iprot.readMapBegin();
                struct._map_double = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map62.size);
                java.lang.String _key63;
                double _val64;
                for (int _i65 = 0; _i65 < _map62.size; ++_i65)
                {
                  _key63 = iprot.readString();
                  _val64 = iprot.readDouble();
                  struct._map_double.put(_key63, _val64);
                }
                iprot.readMapEnd();
              }
              struct.set_map_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // _MAP_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
                struct._map_string = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map66.size);
                java.lang.String _key67;
                java.lang.String _val68;
                for (int _i69 = 0; _i69 < _map66.size; ++_i69)
                {
                  _key67 = iprot.readString();
                  _val68 = iprot.readString();
                  struct._map_string.put(_key67, _val68);
                }
                iprot.readMapEnd();
              }
              struct.set_map_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._sender_id != null) {
        oprot.writeFieldBegin(_SENDER_ID_FIELD_DESC);
        oprot.writeString(struct._sender_id);
        oprot.writeFieldEnd();
      }
      if (struct._receiver_id != null) {
        if (struct.isSet_receiver_id()) {
          oprot.writeFieldBegin(_RECEIVER_ID_FIELD_DESC);
          oprot.writeString(struct._receiver_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct._timestamp != null) {
        if (struct.isSet_timestamp()) {
          oprot.writeFieldBegin(_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct._timestamp);
          oprot.writeFieldEnd();
        }
      }
      if (struct._subject != null) {
        if (struct.isSet_subject()) {
          oprot.writeFieldBegin(_SUBJECT_FIELD_DESC);
          oprot.writeString(struct._subject);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSet_sequence_no()) {
        oprot.writeFieldBegin(_SEQUENCE_NO_FIELD_DESC);
        oprot.writeI64(struct._sequence_no);
        oprot.writeFieldEnd();
      }
      if (struct.isSet_total_count()) {
        oprot.writeFieldBegin(_TOTAL_COUNT_FIELD_DESC);
        oprot.writeI64(struct._total_count);
        oprot.writeFieldEnd();
      }
      if (struct._binary != null) {
        if (struct.isSet_binary()) {
          oprot.writeFieldBegin(_BINARY_FIELD_DESC);
          oprot.writeBinary(struct._binary);
          oprot.writeFieldEnd();
        }
      }
      if (struct._payload != null) {
        if (struct.isSet_payload()) {
          oprot.writeFieldBegin(_PAYLOAD_FIELD_DESC);
          oprot.writeString(struct._payload);
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_message != null) {
        if (struct.isSet_list_message()) {
          oprot.writeFieldBegin(_LIST_MESSAGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct._list_message.size()));
            for (ThriftMessage _iter70 : struct._list_message)
            {
              _iter70.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._set_message != null) {
        if (struct.isSet_set_message()) {
          oprot.writeFieldBegin(_SET_MESSAGE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct._set_message.size()));
            for (ThriftMessage _iter71 : struct._set_message)
            {
              _iter71.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._map_message != null) {
        if (struct.isSet_map_message()) {
          oprot.writeFieldBegin(_MAP_MESSAGE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct._map_message.size()));
            for (java.util.Map.Entry<java.lang.String, ThriftMessage> _iter72 : struct._map_message.entrySet())
            {
              oprot.writeString(_iter72.getKey());
              _iter72.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_bool != null) {
        if (struct.isSet_list_bool()) {
          oprot.writeFieldBegin(_LIST_BOOL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct._list_bool.size()));
            for (boolean _iter73 : struct._list_bool)
            {
              oprot.writeBool(_iter73);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_i16 != null) {
        if (struct.isSet_list_i16()) {
          oprot.writeFieldBegin(_LIST_I16_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct._list_i16.size()));
            for (short _iter74 : struct._list_i16)
            {
              oprot.writeI16(_iter74);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_i32 != null) {
        if (struct.isSet_list_i32()) {
          oprot.writeFieldBegin(_LIST_I32_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct._list_i32.size()));
            for (int _iter75 : struct._list_i32)
            {
              oprot.writeI32(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_i64 != null) {
        if (struct.isSet_list_i64()) {
          oprot.writeFieldBegin(_LIST_I64_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct._list_i64.size()));
            for (long _iter76 : struct._list_i64)
            {
              oprot.writeI64(_iter76);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_double != null) {
        if (struct.isSet_list_double()) {
          oprot.writeFieldBegin(_LIST_DOUBLE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct._list_double.size()));
            for (double _iter77 : struct._list_double)
            {
              oprot.writeDouble(_iter77);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_string != null) {
        if (struct.isSet_list_string()) {
          oprot.writeFieldBegin(_LIST_STRING_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct._list_string.size()));
            for (java.lang.String _iter78 : struct._list_string)
            {
              oprot.writeString(_iter78);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._set_bool != null) {
        if (struct.isSet_set_bool()) {
          oprot.writeFieldBegin(_SET_BOOL_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BOOL, struct._set_bool.size()));
            for (boolean _iter79 : struct._set_bool)
            {
              oprot.writeBool(_iter79);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._set_i16 != null) {
        if (struct.isSet_set_i16()) {
          oprot.writeFieldBegin(_SET_I16_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, struct._set_i16.size()));
            for (short _iter80 : struct._set_i16)
            {
              oprot.writeI16(_iter80);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._set_i32 != null) {
        if (struct.isSet_set_i32()) {
          oprot.writeFieldBegin(_SET_I32_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct._set_i32.size()));
            for (int _iter81 : struct._set_i32)
            {
              oprot.writeI32(_iter81);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._set_i64 != null) {
        if (struct.isSet_set_i64()) {
          oprot.writeFieldBegin(_SET_I64_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct._set_i64.size()));
            for (long _iter82 : struct._set_i64)
            {
              oprot.writeI64(_iter82);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._set_double != null) {
        if (struct.isSet_set_double()) {
          oprot.writeFieldBegin(_SET_DOUBLE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, struct._set_double.size()));
            for (double _iter83 : struct._set_double)
            {
              oprot.writeDouble(_iter83);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._set_string != null) {
        if (struct.isSet_set_string()) {
          oprot.writeFieldBegin(_SET_STRING_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct._set_string.size()));
            for (java.lang.String _iter84 : struct._set_string)
            {
              oprot.writeString(_iter84);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._map_bool != null) {
        if (struct.isSet_map_bool()) {
          oprot.writeFieldBegin(_MAP_BOOL_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, struct._map_bool.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter85 : struct._map_bool.entrySet())
            {
              oprot.writeString(_iter85.getKey());
              oprot.writeBool(_iter85.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._map_i16 != null) {
        if (struct.isSet_map_i16()) {
          oprot.writeFieldBegin(_MAP_I16_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I16, struct._map_i16.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Short> _iter86 : struct._map_i16.entrySet())
            {
              oprot.writeString(_iter86.getKey());
              oprot.writeI16(_iter86.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._map_i32 != null) {
        if (struct.isSet_map_i32()) {
          oprot.writeFieldBegin(_MAP_I32_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct._map_i32.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter87 : struct._map_i32.entrySet())
            {
              oprot.writeString(_iter87.getKey());
              oprot.writeI32(_iter87.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._map_i64 != null) {
        if (struct.isSet_map_i64()) {
          oprot.writeFieldBegin(_MAP_I64_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct._map_i64.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter88 : struct._map_i64.entrySet())
            {
              oprot.writeString(_iter88.getKey());
              oprot.writeI64(_iter88.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._map_double != null) {
        if (struct.isSet_map_double()) {
          oprot.writeFieldBegin(_MAP_DOUBLE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct._map_double.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter89 : struct._map_double.entrySet())
            {
              oprot.writeString(_iter89.getKey());
              oprot.writeDouble(_iter89.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._map_string != null) {
        if (struct.isSet_map_string()) {
          oprot.writeFieldBegin(_MAP_STRING_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct._map_string.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter90 : struct._map_string.entrySet())
            {
              oprot.writeString(_iter90.getKey());
              oprot.writeString(_iter90.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftMessageTupleScheme getScheme() {
      return new ThriftMessageTupleScheme();
    }
  }

  private static class ThriftMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct._sender_id);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSet_receiver_id()) {
        optionals.set(0);
      }
      if (struct.isSet_timestamp()) {
        optionals.set(1);
      }
      if (struct.isSet_subject()) {
        optionals.set(2);
      }
      if (struct.isSet_sequence_no()) {
        optionals.set(3);
      }
      if (struct.isSet_total_count()) {
        optionals.set(4);
      }
      if (struct.isSet_binary()) {
        optionals.set(5);
      }
      if (struct.isSet_payload()) {
        optionals.set(6);
      }
      if (struct.isSet_list_message()) {
        optionals.set(7);
      }
      if (struct.isSet_set_message()) {
        optionals.set(8);
      }
      if (struct.isSet_map_message()) {
        optionals.set(9);
      }
      if (struct.isSet_list_bool()) {
        optionals.set(10);
      }
      if (struct.isSet_list_i16()) {
        optionals.set(11);
      }
      if (struct.isSet_list_i32()) {
        optionals.set(12);
      }
      if (struct.isSet_list_i64()) {
        optionals.set(13);
      }
      if (struct.isSet_list_double()) {
        optionals.set(14);
      }
      if (struct.isSet_list_string()) {
        optionals.set(15);
      }
      if (struct.isSet_set_bool()) {
        optionals.set(16);
      }
      if (struct.isSet_set_i16()) {
        optionals.set(17);
      }
      if (struct.isSet_set_i32()) {
        optionals.set(18);
      }
      if (struct.isSet_set_i64()) {
        optionals.set(19);
      }
      if (struct.isSet_set_double()) {
        optionals.set(20);
      }
      if (struct.isSet_set_string()) {
        optionals.set(21);
      }
      if (struct.isSet_map_bool()) {
        optionals.set(22);
      }
      if (struct.isSet_map_i16()) {
        optionals.set(23);
      }
      if (struct.isSet_map_i32()) {
        optionals.set(24);
      }
      if (struct.isSet_map_i64()) {
        optionals.set(25);
      }
      if (struct.isSet_map_double()) {
        optionals.set(26);
      }
      if (struct.isSet_map_string()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSet_receiver_id()) {
        oprot.writeString(struct._receiver_id);
      }
      if (struct.isSet_timestamp()) {
        oprot.writeString(struct._timestamp);
      }
      if (struct.isSet_subject()) {
        oprot.writeString(struct._subject);
      }
      if (struct.isSet_sequence_no()) {
        oprot.writeI64(struct._sequence_no);
      }
      if (struct.isSet_total_count()) {
        oprot.writeI64(struct._total_count);
      }
      if (struct.isSet_binary()) {
        oprot.writeBinary(struct._binary);
      }
      if (struct.isSet_payload()) {
        oprot.writeString(struct._payload);
      }
      if (struct.isSet_list_message()) {
        {
          oprot.writeI32(struct._list_message.size());
          for (ThriftMessage _iter91 : struct._list_message)
          {
            _iter91.write(oprot);
          }
        }
      }
      if (struct.isSet_set_message()) {
        {
          oprot.writeI32(struct._set_message.size());
          for (ThriftMessage _iter92 : struct._set_message)
          {
            _iter92.write(oprot);
          }
        }
      }
      if (struct.isSet_map_message()) {
        {
          oprot.writeI32(struct._map_message.size());
          for (java.util.Map.Entry<java.lang.String, ThriftMessage> _iter93 : struct._map_message.entrySet())
          {
            oprot.writeString(_iter93.getKey());
            _iter93.getValue().write(oprot);
          }
        }
      }
      if (struct.isSet_list_bool()) {
        {
          oprot.writeI32(struct._list_bool.size());
          for (boolean _iter94 : struct._list_bool)
          {
            oprot.writeBool(_iter94);
          }
        }
      }
      if (struct.isSet_list_i16()) {
        {
          oprot.writeI32(struct._list_i16.size());
          for (short _iter95 : struct._list_i16)
          {
            oprot.writeI16(_iter95);
          }
        }
      }
      if (struct.isSet_list_i32()) {
        {
          oprot.writeI32(struct._list_i32.size());
          for (int _iter96 : struct._list_i32)
          {
            oprot.writeI32(_iter96);
          }
        }
      }
      if (struct.isSet_list_i64()) {
        {
          oprot.writeI32(struct._list_i64.size());
          for (long _iter97 : struct._list_i64)
          {
            oprot.writeI64(_iter97);
          }
        }
      }
      if (struct.isSet_list_double()) {
        {
          oprot.writeI32(struct._list_double.size());
          for (double _iter98 : struct._list_double)
          {
            oprot.writeDouble(_iter98);
          }
        }
      }
      if (struct.isSet_list_string()) {
        {
          oprot.writeI32(struct._list_string.size());
          for (java.lang.String _iter99 : struct._list_string)
          {
            oprot.writeString(_iter99);
          }
        }
      }
      if (struct.isSet_set_bool()) {
        {
          oprot.writeI32(struct._set_bool.size());
          for (boolean _iter100 : struct._set_bool)
          {
            oprot.writeBool(_iter100);
          }
        }
      }
      if (struct.isSet_set_i16()) {
        {
          oprot.writeI32(struct._set_i16.size());
          for (short _iter101 : struct._set_i16)
          {
            oprot.writeI16(_iter101);
          }
        }
      }
      if (struct.isSet_set_i32()) {
        {
          oprot.writeI32(struct._set_i32.size());
          for (int _iter102 : struct._set_i32)
          {
            oprot.writeI32(_iter102);
          }
        }
      }
      if (struct.isSet_set_i64()) {
        {
          oprot.writeI32(struct._set_i64.size());
          for (long _iter103 : struct._set_i64)
          {
            oprot.writeI64(_iter103);
          }
        }
      }
      if (struct.isSet_set_double()) {
        {
          oprot.writeI32(struct._set_double.size());
          for (double _iter104 : struct._set_double)
          {
            oprot.writeDouble(_iter104);
          }
        }
      }
      if (struct.isSet_set_string()) {
        {
          oprot.writeI32(struct._set_string.size());
          for (java.lang.String _iter105 : struct._set_string)
          {
            oprot.writeString(_iter105);
          }
        }
      }
      if (struct.isSet_map_bool()) {
        {
          oprot.writeI32(struct._map_bool.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter106 : struct._map_bool.entrySet())
          {
            oprot.writeString(_iter106.getKey());
            oprot.writeBool(_iter106.getValue());
          }
        }
      }
      if (struct.isSet_map_i16()) {
        {
          oprot.writeI32(struct._map_i16.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Short> _iter107 : struct._map_i16.entrySet())
          {
            oprot.writeString(_iter107.getKey());
            oprot.writeI16(_iter107.getValue());
          }
        }
      }
      if (struct.isSet_map_i32()) {
        {
          oprot.writeI32(struct._map_i32.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter108 : struct._map_i32.entrySet())
          {
            oprot.writeString(_iter108.getKey());
            oprot.writeI32(_iter108.getValue());
          }
        }
      }
      if (struct.isSet_map_i64()) {
        {
          oprot.writeI32(struct._map_i64.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter109 : struct._map_i64.entrySet())
          {
            oprot.writeString(_iter109.getKey());
            oprot.writeI64(_iter109.getValue());
          }
        }
      }
      if (struct.isSet_map_double()) {
        {
          oprot.writeI32(struct._map_double.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter110 : struct._map_double.entrySet())
          {
            oprot.writeString(_iter110.getKey());
            oprot.writeDouble(_iter110.getValue());
          }
        }
      }
      if (struct.isSet_map_string()) {
        {
          oprot.writeI32(struct._map_string.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter111 : struct._map_string.entrySet())
          {
            oprot.writeString(_iter111.getKey());
            oprot.writeString(_iter111.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._sender_id = iprot.readString();
      struct.set_sender_idIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct._receiver_id = iprot.readString();
        struct.set_receiver_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct._timestamp = iprot.readString();
        struct.set_timestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct._subject = iprot.readString();
        struct.set_subjectIsSet(true);
      }
      if (incoming.get(3)) {
        struct._sequence_no = iprot.readI64();
        struct.set_sequence_noIsSet(true);
      }
      if (incoming.get(4)) {
        struct._total_count = iprot.readI64();
        struct.set_total_countIsSet(true);
      }
      if (incoming.get(5)) {
        struct._binary = iprot.readBinary();
        struct.set_binaryIsSet(true);
      }
      if (incoming.get(6)) {
        struct._payload = iprot.readString();
        struct.set_payloadIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list112 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct._list_message = new java.util.ArrayList<ThriftMessage>(_list112.size);
          ThriftMessage _elem113;
          for (int _i114 = 0; _i114 < _list112.size; ++_i114)
          {
            _elem113 = new ThriftMessage();
            _elem113.read(iprot);
            struct._list_message.add(_elem113);
          }
        }
        struct.set_list_messageIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set115 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct._set_message = new java.util.HashSet<ThriftMessage>(2*_set115.size);
          ThriftMessage _elem116;
          for (int _i117 = 0; _i117 < _set115.size; ++_i117)
          {
            _elem116 = new ThriftMessage();
            _elem116.read(iprot);
            struct._set_message.add(_elem116);
          }
        }
        struct.set_set_messageIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map118 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct._map_message = new java.util.HashMap<java.lang.String,ThriftMessage>(2*_map118.size);
          java.lang.String _key119;
          ThriftMessage _val120;
          for (int _i121 = 0; _i121 < _map118.size; ++_i121)
          {
            _key119 = iprot.readString();
            _val120 = new ThriftMessage();
            _val120.read(iprot);
            struct._map_message.put(_key119, _val120);
          }
        }
        struct.set_map_messageIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct._list_bool = new java.util.ArrayList<java.lang.Boolean>(_list122.size);
          boolean _elem123;
          for (int _i124 = 0; _i124 < _list122.size; ++_i124)
          {
            _elem123 = iprot.readBool();
            struct._list_bool.add(_elem123);
          }
        }
        struct.set_list_boolIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct._list_i16 = new java.util.ArrayList<java.lang.Short>(_list125.size);
          short _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = iprot.readI16();
            struct._list_i16.add(_elem126);
          }
        }
        struct.set_list_i16IsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list128 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct._list_i32 = new java.util.ArrayList<java.lang.Integer>(_list128.size);
          int _elem129;
          for (int _i130 = 0; _i130 < _list128.size; ++_i130)
          {
            _elem129 = iprot.readI32();
            struct._list_i32.add(_elem129);
          }
        }
        struct.set_list_i32IsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct._list_i64 = new java.util.ArrayList<java.lang.Long>(_list131.size);
          long _elem132;
          for (int _i133 = 0; _i133 < _list131.size; ++_i133)
          {
            _elem132 = iprot.readI64();
            struct._list_i64.add(_elem132);
          }
        }
        struct.set_list_i64IsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list134 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct._list_double = new java.util.ArrayList<java.lang.Double>(_list134.size);
          double _elem135;
          for (int _i136 = 0; _i136 < _list134.size; ++_i136)
          {
            _elem135 = iprot.readDouble();
            struct._list_double.add(_elem135);
          }
        }
        struct.set_list_doubleIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct._list_string = new java.util.ArrayList<java.lang.String>(_list137.size);
          java.lang.String _elem138;
          for (int _i139 = 0; _i139 < _list137.size; ++_i139)
          {
            _elem138 = iprot.readString();
            struct._list_string.add(_elem138);
          }
        }
        struct.set_list_stringIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TSet _set140 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct._set_bool = new java.util.HashSet<java.lang.Boolean>(2*_set140.size);
          boolean _elem141;
          for (int _i142 = 0; _i142 < _set140.size; ++_i142)
          {
            _elem141 = iprot.readBool();
            struct._set_bool.add(_elem141);
          }
        }
        struct.set_set_boolIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TSet _set143 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct._set_i16 = new java.util.HashSet<java.lang.Short>(2*_set143.size);
          short _elem144;
          for (int _i145 = 0; _i145 < _set143.size; ++_i145)
          {
            _elem144 = iprot.readI16();
            struct._set_i16.add(_elem144);
          }
        }
        struct.set_set_i16IsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TSet _set146 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct._set_i32 = new java.util.HashSet<java.lang.Integer>(2*_set146.size);
          int _elem147;
          for (int _i148 = 0; _i148 < _set146.size; ++_i148)
          {
            _elem147 = iprot.readI32();
            struct._set_i32.add(_elem147);
          }
        }
        struct.set_set_i32IsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TSet _set149 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct._set_i64 = new java.util.HashSet<java.lang.Long>(2*_set149.size);
          long _elem150;
          for (int _i151 = 0; _i151 < _set149.size; ++_i151)
          {
            _elem150 = iprot.readI64();
            struct._set_i64.add(_elem150);
          }
        }
        struct.set_set_i64IsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TSet _set152 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct._set_double = new java.util.HashSet<java.lang.Double>(2*_set152.size);
          double _elem153;
          for (int _i154 = 0; _i154 < _set152.size; ++_i154)
          {
            _elem153 = iprot.readDouble();
            struct._set_double.add(_elem153);
          }
        }
        struct.set_set_doubleIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TSet _set155 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct._set_string = new java.util.HashSet<java.lang.String>(2*_set155.size);
          java.lang.String _elem156;
          for (int _i157 = 0; _i157 < _set155.size; ++_i157)
          {
            _elem156 = iprot.readString();
            struct._set_string.add(_elem156);
          }
        }
        struct.set_set_stringIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TMap _map158 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct._map_bool = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map158.size);
          java.lang.String _key159;
          boolean _val160;
          for (int _i161 = 0; _i161 < _map158.size; ++_i161)
          {
            _key159 = iprot.readString();
            _val160 = iprot.readBool();
            struct._map_bool.put(_key159, _val160);
          }
        }
        struct.set_map_boolIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TMap _map162 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct._map_i16 = new java.util.HashMap<java.lang.String,java.lang.Short>(2*_map162.size);
          java.lang.String _key163;
          short _val164;
          for (int _i165 = 0; _i165 < _map162.size; ++_i165)
          {
            _key163 = iprot.readString();
            _val164 = iprot.readI16();
            struct._map_i16.put(_key163, _val164);
          }
        }
        struct.set_map_i16IsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TMap _map166 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct._map_i32 = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map166.size);
          java.lang.String _key167;
          int _val168;
          for (int _i169 = 0; _i169 < _map166.size; ++_i169)
          {
            _key167 = iprot.readString();
            _val168 = iprot.readI32();
            struct._map_i32.put(_key167, _val168);
          }
        }
        struct.set_map_i32IsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TMap _map170 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct._map_i64 = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map170.size);
          java.lang.String _key171;
          long _val172;
          for (int _i173 = 0; _i173 < _map170.size; ++_i173)
          {
            _key171 = iprot.readString();
            _val172 = iprot.readI64();
            struct._map_i64.put(_key171, _val172);
          }
        }
        struct.set_map_i64IsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TMap _map174 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct._map_double = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map174.size);
          java.lang.String _key175;
          double _val176;
          for (int _i177 = 0; _i177 < _map174.size; ++_i177)
          {
            _key175 = iprot.readString();
            _val176 = iprot.readDouble();
            struct._map_double.put(_key175, _val176);
          }
        }
        struct.set_map_doubleIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TMap _map178 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct._map_string = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map178.size);
          java.lang.String _key179;
          java.lang.String _val180;
          for (int _i181 = 0; _i181 < _map178.size; ++_i181)
          {
            _key179 = iprot.readString();
            _val180 = iprot.readString();
            struct._map_string.put(_key179, _val180);
          }
        }
        struct.set_map_stringIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

