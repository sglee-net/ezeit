#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ThriftMessage(object):
    """
    Attributes:
     - _sender_id
     - _receiver_id
     - _timestamp
     - _subject
     - _sequence_no
     - _total_count
     - _binary
     - _payload
     - _list_message
     - _set_message
     - _map_message
     - _list_bool
     - _list_i16
     - _list_i32
     - _list_i64
     - _list_double
     - _list_string
     - _set_bool
     - _set_i16
     - _set_i32
     - _set_i64
     - _set_double
     - _set_string
     - _map_bool
     - _map_i16
     - _map_i32
     - _map_i64
     - _map_double
     - _map_string
    """


    def __init__(self, _sender_id=None, _receiver_id=None, _timestamp=None, _subject=None, _sequence_no=None, _total_count=None, _binary=None, _payload=None, _list_message=None, _set_message=None, _map_message=None, _list_bool=None, _list_i16=None, _list_i32=None, _list_i64=None, _list_double=None, _list_string=None, _set_bool=None, _set_i16=None, _set_i32=None, _set_i64=None, _set_double=None, _set_string=None, _map_bool=None, _map_i16=None, _map_i32=None, _map_i64=None, _map_double=None, _map_string=None,):
        self._sender_id = _sender_id
        self._receiver_id = _receiver_id
        self._timestamp = _timestamp
        self._subject = _subject
        self._sequence_no = _sequence_no
        self._total_count = _total_count
        self._binary = _binary
        self._payload = _payload
        self._list_message = _list_message
        self._set_message = _set_message
        self._map_message = _map_message
        self._list_bool = _list_bool
        self._list_i16 = _list_i16
        self._list_i32 = _list_i32
        self._list_i64 = _list_i64
        self._list_double = _list_double
        self._list_string = _list_string
        self._set_bool = _set_bool
        self._set_i16 = _set_i16
        self._set_i32 = _set_i32
        self._set_i64 = _set_i64
        self._set_double = _set_double
        self._set_string = _set_string
        self._map_bool = _map_bool
        self._map_i16 = _map_i16
        self._map_i32 = _map_i32
        self._map_i64 = _map_i64
        self._map_double = _map_double
        self._map_string = _map_string

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self._sender_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self._receiver_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self._timestamp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self._subject = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self._sequence_no = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self._total_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self._binary = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self._payload = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self._list_message = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ThriftMessage()
                        _elem5.read(iprot)
                        self._list_message.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.SET:
                    self._set_message = set()
                    (_etype9, _size6) = iprot.readSetBegin()
                    for _i10 in range(_size6):
                        _elem11 = ThriftMessage()
                        _elem11.read(iprot)
                        self._set_message.add(_elem11)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self._map_message = {}
                    (_ktype13, _vtype14, _size12) = iprot.readMapBegin()
                    for _i16 in range(_size12):
                        _key17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val18 = ThriftMessage()
                        _val18.read(iprot)
                        self._map_message[_key17] = _val18
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self._list_bool = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = iprot.readBool()
                        self._list_bool.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self._list_i16 = []
                    (_etype28, _size25) = iprot.readListBegin()
                    for _i29 in range(_size25):
                        _elem30 = iprot.readI16()
                        self._list_i16.append(_elem30)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self._list_i32 = []
                    (_etype34, _size31) = iprot.readListBegin()
                    for _i35 in range(_size31):
                        _elem36 = iprot.readI32()
                        self._list_i32.append(_elem36)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self._list_i64 = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = iprot.readI64()
                        self._list_i64.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self._list_double = []
                    (_etype46, _size43) = iprot.readListBegin()
                    for _i47 in range(_size43):
                        _elem48 = iprot.readDouble()
                        self._list_double.append(_elem48)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self._list_string = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self._list_string.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.SET:
                    self._set_bool = set()
                    (_etype58, _size55) = iprot.readSetBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readBool()
                        self._set_bool.add(_elem60)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.SET:
                    self._set_i16 = set()
                    (_etype64, _size61) = iprot.readSetBegin()
                    for _i65 in range(_size61):
                        _elem66 = iprot.readI16()
                        self._set_i16.add(_elem66)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.SET:
                    self._set_i32 = set()
                    (_etype70, _size67) = iprot.readSetBegin()
                    for _i71 in range(_size67):
                        _elem72 = iprot.readI32()
                        self._set_i32.add(_elem72)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.SET:
                    self._set_i64 = set()
                    (_etype76, _size73) = iprot.readSetBegin()
                    for _i77 in range(_size73):
                        _elem78 = iprot.readI64()
                        self._set_i64.add(_elem78)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.SET:
                    self._set_double = set()
                    (_etype82, _size79) = iprot.readSetBegin()
                    for _i83 in range(_size79):
                        _elem84 = iprot.readDouble()
                        self._set_double.add(_elem84)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.SET:
                    self._set_string = set()
                    (_etype88, _size85) = iprot.readSetBegin()
                    for _i89 in range(_size85):
                        _elem90 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self._set_string.add(_elem90)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.MAP:
                    self._map_bool = {}
                    (_ktype92, _vtype93, _size91) = iprot.readMapBegin()
                    for _i95 in range(_size91):
                        _key96 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val97 = iprot.readBool()
                        self._map_bool[_key96] = _val97
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.MAP:
                    self._map_i16 = {}
                    (_ktype99, _vtype100, _size98) = iprot.readMapBegin()
                    for _i102 in range(_size98):
                        _key103 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val104 = iprot.readI16()
                        self._map_i16[_key103] = _val104
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.MAP:
                    self._map_i32 = {}
                    (_ktype106, _vtype107, _size105) = iprot.readMapBegin()
                    for _i109 in range(_size105):
                        _key110 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val111 = iprot.readI32()
                        self._map_i32[_key110] = _val111
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.MAP:
                    self._map_i64 = {}
                    (_ktype113, _vtype114, _size112) = iprot.readMapBegin()
                    for _i116 in range(_size112):
                        _key117 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val118 = iprot.readI64()
                        self._map_i64[_key117] = _val118
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.MAP:
                    self._map_double = {}
                    (_ktype120, _vtype121, _size119) = iprot.readMapBegin()
                    for _i123 in range(_size119):
                        _key124 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val125 = iprot.readDouble()
                        self._map_double[_key124] = _val125
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.MAP:
                    self._map_string = {}
                    (_ktype127, _vtype128, _size126) = iprot.readMapBegin()
                    for _i130 in range(_size126):
                        _key131 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val132 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self._map_string[_key131] = _val132
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ThriftMessage')
        if self._sender_id is not None:
            oprot.writeFieldBegin('_sender_id', TType.STRING, 1)
            oprot.writeString(self._sender_id.encode('utf-8') if sys.version_info[0] == 2 else self._sender_id)
            oprot.writeFieldEnd()
        if self._receiver_id is not None:
            oprot.writeFieldBegin('_receiver_id', TType.STRING, 2)
            oprot.writeString(self._receiver_id.encode('utf-8') if sys.version_info[0] == 2 else self._receiver_id)
            oprot.writeFieldEnd()
        if self._timestamp is not None:
            oprot.writeFieldBegin('_timestamp', TType.STRING, 3)
            oprot.writeString(self._timestamp.encode('utf-8') if sys.version_info[0] == 2 else self._timestamp)
            oprot.writeFieldEnd()
        if self._subject is not None:
            oprot.writeFieldBegin('_subject', TType.STRING, 4)
            oprot.writeString(self._subject.encode('utf-8') if sys.version_info[0] == 2 else self._subject)
            oprot.writeFieldEnd()
        if self._sequence_no is not None:
            oprot.writeFieldBegin('_sequence_no', TType.I64, 5)
            oprot.writeI64(self._sequence_no)
            oprot.writeFieldEnd()
        if self._total_count is not None:
            oprot.writeFieldBegin('_total_count', TType.I64, 6)
            oprot.writeI64(self._total_count)
            oprot.writeFieldEnd()
        if self._binary is not None:
            oprot.writeFieldBegin('_binary', TType.STRING, 7)
            oprot.writeBinary(self._binary)
            oprot.writeFieldEnd()
        if self._payload is not None:
            oprot.writeFieldBegin('_payload', TType.STRING, 8)
            oprot.writeString(self._payload.encode('utf-8') if sys.version_info[0] == 2 else self._payload)
            oprot.writeFieldEnd()
        if self._list_message is not None:
            oprot.writeFieldBegin('_list_message', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self._list_message))
            for iter133 in self._list_message:
                iter133.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self._set_message is not None:
            oprot.writeFieldBegin('_set_message', TType.SET, 10)
            oprot.writeSetBegin(TType.STRUCT, len(self._set_message))
            for iter134 in self._set_message:
                iter134.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self._map_message is not None:
            oprot.writeFieldBegin('_map_message', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self._map_message))
            for kiter135, viter136 in self._map_message.items():
                oprot.writeString(kiter135.encode('utf-8') if sys.version_info[0] == 2 else kiter135)
                viter136.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self._list_bool is not None:
            oprot.writeFieldBegin('_list_bool', TType.LIST, 12)
            oprot.writeListBegin(TType.BOOL, len(self._list_bool))
            for iter137 in self._list_bool:
                oprot.writeBool(iter137)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self._list_i16 is not None:
            oprot.writeFieldBegin('_list_i16', TType.LIST, 13)
            oprot.writeListBegin(TType.I16, len(self._list_i16))
            for iter138 in self._list_i16:
                oprot.writeI16(iter138)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self._list_i32 is not None:
            oprot.writeFieldBegin('_list_i32', TType.LIST, 14)
            oprot.writeListBegin(TType.I32, len(self._list_i32))
            for iter139 in self._list_i32:
                oprot.writeI32(iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self._list_i64 is not None:
            oprot.writeFieldBegin('_list_i64', TType.LIST, 15)
            oprot.writeListBegin(TType.I64, len(self._list_i64))
            for iter140 in self._list_i64:
                oprot.writeI64(iter140)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self._list_double is not None:
            oprot.writeFieldBegin('_list_double', TType.LIST, 16)
            oprot.writeListBegin(TType.DOUBLE, len(self._list_double))
            for iter141 in self._list_double:
                oprot.writeDouble(iter141)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self._list_string is not None:
            oprot.writeFieldBegin('_list_string', TType.LIST, 17)
            oprot.writeListBegin(TType.STRING, len(self._list_string))
            for iter142 in self._list_string:
                oprot.writeString(iter142.encode('utf-8') if sys.version_info[0] == 2 else iter142)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self._set_bool is not None:
            oprot.writeFieldBegin('_set_bool', TType.SET, 18)
            oprot.writeSetBegin(TType.BOOL, len(self._set_bool))
            for iter143 in self._set_bool:
                oprot.writeBool(iter143)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self._set_i16 is not None:
            oprot.writeFieldBegin('_set_i16', TType.SET, 19)
            oprot.writeSetBegin(TType.I16, len(self._set_i16))
            for iter144 in self._set_i16:
                oprot.writeI16(iter144)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self._set_i32 is not None:
            oprot.writeFieldBegin('_set_i32', TType.SET, 20)
            oprot.writeSetBegin(TType.I32, len(self._set_i32))
            for iter145 in self._set_i32:
                oprot.writeI32(iter145)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self._set_i64 is not None:
            oprot.writeFieldBegin('_set_i64', TType.SET, 21)
            oprot.writeSetBegin(TType.I64, len(self._set_i64))
            for iter146 in self._set_i64:
                oprot.writeI64(iter146)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self._set_double is not None:
            oprot.writeFieldBegin('_set_double', TType.SET, 22)
            oprot.writeSetBegin(TType.DOUBLE, len(self._set_double))
            for iter147 in self._set_double:
                oprot.writeDouble(iter147)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self._set_string is not None:
            oprot.writeFieldBegin('_set_string', TType.SET, 23)
            oprot.writeSetBegin(TType.STRING, len(self._set_string))
            for iter148 in self._set_string:
                oprot.writeString(iter148.encode('utf-8') if sys.version_info[0] == 2 else iter148)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self._map_bool is not None:
            oprot.writeFieldBegin('_map_bool', TType.MAP, 24)
            oprot.writeMapBegin(TType.STRING, TType.BOOL, len(self._map_bool))
            for kiter149, viter150 in self._map_bool.items():
                oprot.writeString(kiter149.encode('utf-8') if sys.version_info[0] == 2 else kiter149)
                oprot.writeBool(viter150)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self._map_i16 is not None:
            oprot.writeFieldBegin('_map_i16', TType.MAP, 25)
            oprot.writeMapBegin(TType.STRING, TType.I16, len(self._map_i16))
            for kiter151, viter152 in self._map_i16.items():
                oprot.writeString(kiter151.encode('utf-8') if sys.version_info[0] == 2 else kiter151)
                oprot.writeI16(viter152)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self._map_i32 is not None:
            oprot.writeFieldBegin('_map_i32', TType.MAP, 26)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self._map_i32))
            for kiter153, viter154 in self._map_i32.items():
                oprot.writeString(kiter153.encode('utf-8') if sys.version_info[0] == 2 else kiter153)
                oprot.writeI32(viter154)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self._map_i64 is not None:
            oprot.writeFieldBegin('_map_i64', TType.MAP, 27)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self._map_i64))
            for kiter155, viter156 in self._map_i64.items():
                oprot.writeString(kiter155.encode('utf-8') if sys.version_info[0] == 2 else kiter155)
                oprot.writeI64(viter156)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self._map_double is not None:
            oprot.writeFieldBegin('_map_double', TType.MAP, 28)
            oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self._map_double))
            for kiter157, viter158 in self._map_double.items():
                oprot.writeString(kiter157.encode('utf-8') if sys.version_info[0] == 2 else kiter157)
                oprot.writeDouble(viter158)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self._map_string is not None:
            oprot.writeFieldBegin('_map_string', TType.MAP, 29)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self._map_string))
            for kiter159, viter160 in self._map_string.items():
                oprot.writeString(kiter159.encode('utf-8') if sys.version_info[0] == 2 else kiter159)
                oprot.writeString(viter160.encode('utf-8') if sys.version_info[0] == 2 else viter160)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self._sender_id is None:
            raise TProtocolException(message='Required field _sender_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidOperationException(TException):
    """
    Attributes:
     - code
     - description
    """


    def __init__(self, code=None, description=None,):
        self.code = code
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidOperationException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ThriftMessage)
ThriftMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, '_sender_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, '_receiver_id', 'UTF8', None, ),  # 2
    (3, TType.STRING, '_timestamp', 'UTF8', None, ),  # 3
    (4, TType.STRING, '_subject', 'UTF8', None, ),  # 4
    (5, TType.I64, '_sequence_no', None, None, ),  # 5
    (6, TType.I64, '_total_count', None, None, ),  # 6
    (7, TType.STRING, '_binary', 'BINARY', None, ),  # 7
    (8, TType.STRING, '_payload', 'UTF8', None, ),  # 8
    (9, TType.LIST, '_list_message', (TType.STRUCT, [ThriftMessage, None], False), None, ),  # 9
    (10, TType.SET, '_set_message', (TType.STRUCT, [ThriftMessage, None], False), None, ),  # 10
    (11, TType.MAP, '_map_message', (TType.STRING, 'UTF8', TType.STRUCT, [ThriftMessage, None], False), None, ),  # 11
    (12, TType.LIST, '_list_bool', (TType.BOOL, None, False), None, ),  # 12
    (13, TType.LIST, '_list_i16', (TType.I16, None, False), None, ),  # 13
    (14, TType.LIST, '_list_i32', (TType.I32, None, False), None, ),  # 14
    (15, TType.LIST, '_list_i64', (TType.I64, None, False), None, ),  # 15
    (16, TType.LIST, '_list_double', (TType.DOUBLE, None, False), None, ),  # 16
    (17, TType.LIST, '_list_string', (TType.STRING, 'UTF8', False), None, ),  # 17
    (18, TType.SET, '_set_bool', (TType.BOOL, None, False), None, ),  # 18
    (19, TType.SET, '_set_i16', (TType.I16, None, False), None, ),  # 19
    (20, TType.SET, '_set_i32', (TType.I32, None, False), None, ),  # 20
    (21, TType.SET, '_set_i64', (TType.I64, None, False), None, ),  # 21
    (22, TType.SET, '_set_double', (TType.DOUBLE, None, False), None, ),  # 22
    (23, TType.SET, '_set_string', (TType.STRING, 'UTF8', False), None, ),  # 23
    (24, TType.MAP, '_map_bool', (TType.STRING, 'UTF8', TType.BOOL, None, False), None, ),  # 24
    (25, TType.MAP, '_map_i16', (TType.STRING, 'UTF8', TType.I16, None, False), None, ),  # 25
    (26, TType.MAP, '_map_i32', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 26
    (27, TType.MAP, '_map_i64', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 27
    (28, TType.MAP, '_map_double', (TType.STRING, 'UTF8', TType.DOUBLE, None, False), None, ),  # 28
    (29, TType.MAP, '_map_string', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 29
)
all_structs.append(InvalidOperationException)
InvalidOperationException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
